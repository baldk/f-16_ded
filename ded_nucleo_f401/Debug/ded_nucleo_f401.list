
ded_nucleo_f401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000405c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb0  080041f0  080041f0  000141f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ea0  08004ea0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ea0  08004ea0  00014ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ea8  08004ea8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ea8  08004ea8  00014ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004eac  08004eac  00014eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000271c  2000000c  08004ebc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002728  08004ebc  00022728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1cf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d87  00000000  00000000  0002b20b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000958  00000000  00000000  0002cf98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000850  00000000  00000000  0002d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000162e1  00000000  00000000  0002e140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000093a8  00000000  00000000  00044421  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087701  00000000  00000000  0004d7c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d4eca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000247c  00000000  00000000  000d4f48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080041d8 	.word	0x080041d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080041d8 	.word	0x080041d8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_DMA_Init+0x3c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <MX_DMA_Init+0x3c>)
 80004e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_DMA_Init+0x3c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	2010      	movs	r0, #16
 80004fc:	f001 fc7f 	bl	8001dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000500:	2010      	movs	r0, #16
 8000502:	f001 fc98 	bl	8001e36 <HAL_NVIC_EnableIRQ>

}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023800 	.word	0x40023800

08000514 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	4b48      	ldr	r3, [pc, #288]	; (8000650 <MX_GPIO_Init+0x13c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a47      	ldr	r2, [pc, #284]	; (8000650 <MX_GPIO_Init+0x13c>)
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b45      	ldr	r3, [pc, #276]	; (8000650 <MX_GPIO_Init+0x13c>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	4b41      	ldr	r3, [pc, #260]	; (8000650 <MX_GPIO_Init+0x13c>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a40      	ldr	r2, [pc, #256]	; (8000650 <MX_GPIO_Init+0x13c>)
 8000550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b3e      	ldr	r3, [pc, #248]	; (8000650 <MX_GPIO_Init+0x13c>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	4b3a      	ldr	r3, [pc, #232]	; (8000650 <MX_GPIO_Init+0x13c>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a39      	ldr	r2, [pc, #228]	; (8000650 <MX_GPIO_Init+0x13c>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b37      	ldr	r3, [pc, #220]	; (8000650 <MX_GPIO_Init+0x13c>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	4b33      	ldr	r3, [pc, #204]	; (8000650 <MX_GPIO_Init+0x13c>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a32      	ldr	r2, [pc, #200]	; (8000650 <MX_GPIO_Init+0x13c>)
 8000588:	f043 0308 	orr.w	r3, r3, #8
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b30      	ldr	r3, [pc, #192]	; (8000650 <MX_GPIO_Init+0x13c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0308 	and.w	r3, r3, #8
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	603b      	str	r3, [r7, #0]
 800059e:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <MX_GPIO_Init+0x13c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a2b      	ldr	r2, [pc, #172]	; (8000650 <MX_GPIO_Init+0x13c>)
 80005a4:	f043 0302 	orr.w	r3, r3, #2
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b29      	ldr	r3, [pc, #164]	; (8000650 <MX_GPIO_Init+0x13c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0302 	and.w	r3, r3, #2
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DC_Pin|CS_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f640 0101 	movw	r1, #2049	; 0x801
 80005bc:	4825      	ldr	r0, [pc, #148]	; (8000654 <MX_GPIO_Init+0x140>)
 80005be:	f001 ffdd 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2120      	movs	r1, #32
 80005c6:	4824      	ldr	r0, [pc, #144]	; (8000658 <MX_GPIO_Init+0x144>)
 80005c8:	f001 ffd8 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2104      	movs	r1, #4
 80005d0:	4822      	ldr	r0, [pc, #136]	; (800065c <MX_GPIO_Init+0x148>)
 80005d2:	f001 ffd3 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005dc:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_GPIO_Init+0x14c>)
 80005de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4619      	mov	r1, r3
 80005ea:	481a      	ldr	r0, [pc, #104]	; (8000654 <MX_GPIO_Init+0x140>)
 80005ec:	f001 fe44 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin;
 80005f0:	f640 0301 	movw	r3, #2049	; 0x801
 80005f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	2300      	movs	r3, #0
 8000600:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	4812      	ldr	r0, [pc, #72]	; (8000654 <MX_GPIO_Init+0x140>)
 800060a:	f001 fe35 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800060e:	2320      	movs	r3, #32
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <MX_GPIO_Init+0x144>)
 8000626:	f001 fe27 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RES_Pin;
 800062a:	2304      	movs	r3, #4
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2300      	movs	r3, #0
 8000638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RES_GPIO_Port, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	4806      	ldr	r0, [pc, #24]	; (800065c <MX_GPIO_Init+0x148>)
 8000642:	f001 fe19 	bl	8002278 <HAL_GPIO_Init>

}
 8000646:	bf00      	nop
 8000648:	3728      	adds	r7, #40	; 0x28
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40020800 	.word	0x40020800
 8000658:	40020000 	.word	0x40020000
 800065c:	40020c00 	.word	0x40020c00
 8000660:	10210000 	.word	0x10210000

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f001 fa5a 	bl	8001b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f810 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f7ff ff50 	bl	8000514 <MX_GPIO_Init>
  MX_DMA_Init();
 8000674:	f7ff ff2e 	bl	80004d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000678:	f001 f97c 	bl	8001974 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800067c:	f000 fa1e 	bl	8000abc <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  // Initialize OLED display
  SSD1322_Initialize();
 8000680:	f000 fa9a 	bl	8000bb8 <SSD1322_Initialize>

  // Start receiving data from UART
  StartReceive();
 8000684:	f000 f93a 	bl	80008fc <StartReceive>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    UpdateDisplay();
 8000688:	f000 f86e 	bl	8000768 <UpdateDisplay>
 800068c:	e7fc      	b.n	8000688 <main+0x24>
	...

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2230      	movs	r2, #48	; 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 fd91 	bl	80041c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <SystemClock_Config+0xd0>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a28      	ldr	r2, [pc, #160]	; (8000760 <SystemClock_Config+0xd0>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b26      	ldr	r3, [pc, #152]	; (8000760 <SystemClock_Config+0xd0>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <SystemClock_Config+0xd4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xd4>)
 80006de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xd4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000700:	2300      	movs	r3, #0
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000704:	2310      	movs	r3, #16
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000708:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800070c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800070e:	2304      	movs	r3, #4
 8000710:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000712:	2307      	movs	r3, #7
 8000714:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	4618      	mov	r0, r3
 800071c:	f001 ff48 	bl	80025b0 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000726:	f000 f9c5 	bl	8000ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2102      	movs	r1, #2
 8000746:	4618      	mov	r0, r3
 8000748:	f002 f9a2 	bl	8002a90 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000752:	f000 f9af 	bl	8000ab4 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <UpdateDisplay>:

/* USER CODE BEGIN 4 */
void UpdateDisplay(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b0be      	sub	sp, #248	; 0xf8
 800076c:	af00      	add	r7, sp, #0
  uint16_t Length;
  uint16_t Buffer[120];

  if (ComRxIn == ComRxOut)
 800076e:	4b5f      	ldr	r3, [pc, #380]	; (80008ec <UpdateDisplay+0x184>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	b29a      	uxth	r2, r3
 8000774:	4b5e      	ldr	r3, [pc, #376]	; (80008f0 <UpdateDisplay+0x188>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	429a      	cmp	r2, r3
 800077a:	f000 80b3 	beq.w	80008e4 <UpdateDisplay+0x17c>
  {
    return;
  }
  else
  {
    if (ComRxIn > ComRxOut)
 800077e:	4b5b      	ldr	r3, [pc, #364]	; (80008ec <UpdateDisplay+0x184>)
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	b29a      	uxth	r2, r3
 8000784:	4b5a      	ldr	r3, [pc, #360]	; (80008f0 <UpdateDisplay+0x188>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	429a      	cmp	r2, r3
 800078a:	d908      	bls.n	800079e <UpdateDisplay+0x36>
    {
      Length = ComRxIn - ComRxOut;
 800078c:	4b57      	ldr	r3, [pc, #348]	; (80008ec <UpdateDisplay+0x184>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	b29a      	uxth	r2, r3
 8000792:	4b57      	ldr	r3, [pc, #348]	; (80008f0 <UpdateDisplay+0x188>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 800079c:	e00a      	b.n	80007b4 <UpdateDisplay+0x4c>
    }
    else
    {
      Length = (COM_RX_BUFFER_SIZE - ComRxOut) + ComRxIn;
 800079e:	4b53      	ldr	r3, [pc, #332]	; (80008ec <UpdateDisplay+0x184>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b52      	ldr	r3, [pc, #328]	; (80008f0 <UpdateDisplay+0x188>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007b0:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
    }
  }

  if (Length >= 240)
 80007b4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80007b8:	2bef      	cmp	r3, #239	; 0xef
 80007ba:	f240 8094 	bls.w	80008e6 <UpdateDisplay+0x17e>
  {
    for (uint16_t i = 0; i < 120; i++)
 80007be:	2300      	movs	r3, #0
 80007c0:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 80007c4:	e049      	b.n	800085a <UpdateDisplay+0xf2>
    {
      Buffer[i]  = ComRxBuffer[ComRxOut];
 80007c6:	4b4a      	ldr	r3, [pc, #296]	; (80008f0 <UpdateDisplay+0x188>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b49      	ldr	r3, [pc, #292]	; (80008f4 <UpdateDisplay+0x18c>)
 80007ce:	5c9b      	ldrb	r3, [r3, r2]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80007d6:	b292      	uxth	r2, r2
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80007de:	440b      	add	r3, r1
 80007e0:	f823 2cf8 	strh.w	r2, [r3, #-248]
      ComRxOut   = (ComRxOut + 1) % COM_RX_BUFFER_SIZE;
 80007e4:	4b42      	ldr	r3, [pc, #264]	; (80008f0 <UpdateDisplay+0x188>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	425a      	negs	r2, r3
 80007ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007f0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80007f4:	bf58      	it	pl
 80007f6:	4253      	negpl	r3, r2
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	4b3d      	ldr	r3, [pc, #244]	; (80008f0 <UpdateDisplay+0x188>)
 80007fc:	801a      	strh	r2, [r3, #0]
      Buffer[i] |= (ComRxBuffer[ComRxOut]<<8);
 80007fe:	4b3c      	ldr	r3, [pc, #240]	; (80008f0 <UpdateDisplay+0x188>)
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	4b3b      	ldr	r3, [pc, #236]	; (80008f4 <UpdateDisplay+0x18c>)
 8000806:	5c9b      	ldrb	r3, [r3, r2]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	0219      	lsls	r1, r3, #8
 800080c:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8000816:	4413      	add	r3, r2
 8000818:	f833 3cf8 	ldrh.w	r3, [r3, #-248]
 800081c:	b21a      	sxth	r2, r3
 800081e:	b20b      	sxth	r3, r1
 8000820:	4313      	orrs	r3, r2
 8000822:	b21a      	sxth	r2, r3
 8000824:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8000828:	b292      	uxth	r2, r2
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8000830:	440b      	add	r3, r1
 8000832:	f823 2cf8 	strh.w	r2, [r3, #-248]
      ComRxOut   = (ComRxOut + 1) % COM_RX_BUFFER_SIZE;
 8000836:	4b2e      	ldr	r3, [pc, #184]	; (80008f0 <UpdateDisplay+0x188>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	425a      	negs	r2, r3
 800083e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000842:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000846:	bf58      	it	pl
 8000848:	4253      	negpl	r3, r2
 800084a:	b29a      	uxth	r2, r3
 800084c:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <UpdateDisplay+0x188>)
 800084e:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < 120; i++)
 8000850:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8000854:	3301      	adds	r3, #1
 8000856:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 800085a:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 800085e:	2b77      	cmp	r3, #119	; 0x77
 8000860:	d9b1      	bls.n	80007c6 <UpdateDisplay+0x5e>
    }

    for (uint16_t i = 0; i < 120; i++)
 8000862:	2300      	movs	r3, #0
 8000864:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 8000868:	e035      	b.n	80008d6 <UpdateDisplay+0x16e>
    {
      SSD1322_DrawUnicode(Buffer[i], 20 + ((i % 24) * 9), 0 + ((9 + 4) * (i / 24)), i < 66 ? 0 : 1);
 800086a:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8000874:	4413      	add	r3, r2
 8000876:	f833 3cf8 	ldrh.w	r3, [r3, #-248]
 800087a:	4618      	mov	r0, r3
 800087c:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <UpdateDisplay+0x190>)
 8000882:	fba3 1302 	umull	r1, r3, r3, r2
 8000886:	0919      	lsrs	r1, r3, #4
 8000888:	460b      	mov	r3, r1
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	440b      	add	r3, r1
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	b29b      	uxth	r3, r3
 8000894:	461a      	mov	r2, r3
 8000896:	4613      	mov	r3, r2
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	4413      	add	r3, r2
 800089c:	f103 0114 	add.w	r1, r3, #20
 80008a0:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 80008a4:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <UpdateDisplay+0x190>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	091b      	lsrs	r3, r3, #4
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	461a      	mov	r2, r3
 80008b0:	4613      	mov	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	441a      	add	r2, r3
 80008ba:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 80008be:	2b41      	cmp	r3, #65	; 0x41
 80008c0:	bf8c      	ite	hi
 80008c2:	2301      	movhi	r3, #1
 80008c4:	2300      	movls	r3, #0
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	f000 fae6 	bl	8000e98 <SSD1322_DrawUnicode>
    for (uint16_t i = 0; i < 120; i++)
 80008cc:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 80008d0:	3301      	adds	r3, #1
 80008d2:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 80008d6:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 80008da:	2b77      	cmp	r3, #119	; 0x77
 80008dc:	d9c5      	bls.n	800086a <UpdateDisplay+0x102>
    }

    SSD1322_Display();
 80008de:	f000 fa6f 	bl	8000dc0 <SSD1322_Display>
 80008e2:	e000      	b.n	80008e6 <UpdateDisplay+0x17e>
    return;
 80008e4:	bf00      	nop
  }
}
 80008e6:	37f8      	adds	r7, #248	; 0xf8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2000242a 	.word	0x2000242a
 80008f0:	20002428 	.word	0x20002428
 80008f4:	20002028 	.word	0x20002028
 80008f8:	aaaaaaab 	.word	0xaaaaaaab

080008fc <StartReceive>:


void StartReceive(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  if (&huart2 != NULL)
  {
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);            // Enable idle line interrupt
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <StartReceive+0x5c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	68da      	ldr	r2, [r3, #12]
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <StartReceive+0x5c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f042 0210 	orr.w	r2, r2, #16
 800090e:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE_IT(huart2.hdmarx, DMA_IT_TC);        // Enable DMA RX complete interrupt
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <StartReceive+0x5c>)
 8000912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <StartReceive+0x5c>)
 800091a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f042 0210 	orr.w	r2, r2, #16
 8000922:	601a      	str	r2, [r3, #0]

    HAL_UART_Receive_DMA(&huart2, (uint8_t*)(DmaRxBuffer), DMA_RX_BUFFER_SIZE);
 8000924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000928:	490c      	ldr	r1, [pc, #48]	; (800095c <StartReceive+0x60>)
 800092a:	480b      	ldr	r0, [pc, #44]	; (8000958 <StartReceive+0x5c>)
 800092c:	f002 fd34 	bl	8003398 <HAL_UART_Receive_DMA>

#if defined (STM32F4)
    huart2.hdmarx->Instance->CR  &= ~DMA_SxCR_HTIE;       // Disable UART half TX interrupt
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <StartReceive+0x5c>)
 8000932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <StartReceive+0x5c>)
 800093a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f022 0208 	bic.w	r2, r2, #8
 8000942:	601a      	str	r2, [r3, #0]
#else
    #error "Specific STM32 has not been defined"
#endif

    // Reset buffer pointers
    ComRxIn  = 0;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <StartReceive+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	801a      	strh	r2, [r3, #0]
    ComRxOut = ComRxIn;
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <StartReceive+0x64>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	b29a      	uxth	r2, r3
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <StartReceive+0x68>)
 8000952:	801a      	strh	r2, [r3, #0]
  }
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200026e4 	.word	0x200026e4
 800095c:	2000242c 	.word	0x2000242c
 8000960:	2000242a 	.word	0x2000242a
 8000964:	20002428 	.word	0x20002428

08000968 <USART_IrqHandler>:


void USART_IrqHandler(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  uint16_t StatusRegister = huart->Instance->SR;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	81fb      	strh	r3, [r7, #14]

//  if (huart->Instance->SR & UART_FLAG_IDLE)           /* if Idle flag is set */
  if (StatusRegister & UART_FLAG_IDLE)                /* if Idle flag is set */
 800097a:	89fb      	ldrh	r3, [r7, #14]
 800097c:	f003 0310 	and.w	r3, r3, #16
 8000980:	2b00      	cmp	r3, #0
 8000982:	d010      	beq.n	80009a6 <USART_IrqHandler+0x3e>
  {
    uint32_t volatile tmp;                            /* Must be volatile to prevent optimizations */
    tmp = huart->Instance->SR;                        /* Read status register */
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	60bb      	str	r3, [r7, #8]
    tmp = huart->Instance->DR;                        /* Read data register */
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	60bb      	str	r3, [r7, #8]

#if defined (STM32F4)
    hdma->Instance->CR  &= ~DMA_SxCR_EN;              /* Disabling DMA will force transfer complete interrupt if enabled */
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f022 0201 	bic.w	r2, r2, #1
 80009a2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    HAL_UART_IRQHandler(huart);
  }
}
 80009a4:	e002      	b.n	80009ac <USART_IrqHandler+0x44>
    HAL_UART_IRQHandler(huart);
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f002 fd76 	bl	8003498 <HAL_UART_IRQHandler>
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <DMA_IrqHandler>:


void DMA_IrqHandler(DMA_HandleTypeDef *hdma)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    __IO uint32_t ISR;   /*!< DMA interrupt status register */
    __IO uint32_t Reserved0;
    __IO uint32_t IFCR;  /*!< DMA interrupt flag clear register */
  } DMA_Base_Registers;

  DMA_Base_Registers *regs = (DMA_Base_Registers *)(hdma->StreamBaseAddress);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c0:	613b      	str	r3, [r7, #16]
  DMA_TypeDef* regs = hdma->DmaBaseAddress;
#else
  #error "Specific STM32 has not been defined"
#endif

  if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)   // if the source is TC
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f003 0310 	and.w	r3, r3, #16
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d066      	beq.n	8000a9e <DMA_IrqHandler+0xea>
  {
#if defined (STM32F4)
    /* Clear the transfer complete flag */
    regs->IFCR = DMA_FLAG_TCIF1_5 << hdma->StreamIndex;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009d8:	409a      	lsls	r2, r3
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	609a      	str	r2, [r3, #8]

    /* Get the length of the data */
    len = DMA_RX_BUFFER_SIZE - hdma->Instance->NDTR;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80009ea:	81fb      	strh	r3, [r7, #14]
#else
    #error "Specific STM32 has not been defined"
#endif

#if 1
    if (len > 0)
 80009ec:	89fb      	ldrh	r3, [r7, #14]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <DMA_IrqHandler+0x42>
    {
      tocopy = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	82fb      	strh	r3, [r7, #22]
    }

    /* Get number of bytes we can copy to the end of buffer */
    tocopy = COM_RX_BUFFER_SIZE - ComRxIn;
 80009f6:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <DMA_IrqHandler+0xf4>)
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000a00:	82fb      	strh	r3, [r7, #22]

    /* Check how many bytes to copy */
    if (tocopy > len)
 8000a02:	8afa      	ldrh	r2, [r7, #22]
 8000a04:	89fb      	ldrh	r3, [r7, #14]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d901      	bls.n	8000a0e <DMA_IrqHandler+0x5a>
    {
      tocopy = len;
 8000a0a:	89fb      	ldrh	r3, [r7, #14]
 8000a0c:	82fb      	strh	r3, [r7, #22]
    }

    /* Write received data for UART main buffer for manipulation later */
    ptr = (uint8_t*)(DmaRxBuffer);
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <DMA_IrqHandler+0xf8>)
 8000a10:	60bb      	str	r3, [r7, #8]

    memcpy((void*)(&ComRxBuffer[ComRxIn]), ptr, tocopy);   /* Copy first part */
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <DMA_IrqHandler+0xf4>)
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <DMA_IrqHandler+0xfc>)
 8000a1c:	4413      	add	r3, r2
 8000a1e:	8afa      	ldrh	r2, [r7, #22]
 8000a20:	68b9      	ldr	r1, [r7, #8]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 fbc4 	bl	80041b0 <memcpy>

    /* Correct values for remaining data */
    ComRxIn += tocopy;
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <DMA_IrqHandler+0xf4>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	8afb      	ldrh	r3, [r7, #22]
 8000a30:	4413      	add	r3, r2
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <DMA_IrqHandler+0xf4>)
 8000a36:	801a      	strh	r2, [r3, #0]
    len -= tocopy;
 8000a38:	89fa      	ldrh	r2, [r7, #14]
 8000a3a:	8afb      	ldrh	r3, [r7, #22]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	81fb      	strh	r3, [r7, #14]
    ptr += tocopy;
 8000a40:	8afb      	ldrh	r3, [r7, #22]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	4413      	add	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]

    /* UNCOMMENT BELOW TO transmit the data via uart */
//    HAL_UART_Transmit(&huart2, &UART_Buffer[Write-tocopy], tocopy, 10);

    /* If still data to write for beginning of buffer */
    if (len)
 8000a48:	89fb      	ldrh	r3, [r7, #14]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d008      	beq.n	8000a60 <DMA_IrqHandler+0xac>
    {
      memcpy((void*)&ComRxBuffer[0], ptr, len);          /* Don't care if we override Read pointer now */
 8000a4e:	89fb      	ldrh	r3, [r7, #14]
 8000a50:	461a      	mov	r2, r3
 8000a52:	68b9      	ldr	r1, [r7, #8]
 8000a54:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <DMA_IrqHandler+0xfc>)
 8000a56:	f003 fbab 	bl	80041b0 <memcpy>
      ComRxIn = len;
 8000a5a:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <DMA_IrqHandler+0xf4>)
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	8013      	strh	r3, [r2, #0]
    }
#else
    cUsb_Write((uint8_t*)(DmaRxBuffer), DMA_RX_BUFFER_SIZE - hdma->Instance->CNDTR, 0);
#endif

    ComRxIn %= COM_RX_BUFFER_SIZE;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <DMA_IrqHandler+0xf4>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <DMA_IrqHandler+0xf4>)
 8000a6e:	801a      	strh	r2, [r3, #0]

    /* Prepare DMA for next transfer */
#if defined (STM32F4)
    /* Important! DMA stream won't start if all flags are not cleared first */
    regs->IFCR = 0x3FU << hdma->StreamIndex;            /* Clear all interrupts */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a74:	223f      	movs	r2, #63	; 0x3f
 8000a76:	409a      	lsls	r2, r3
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR   = (uint32_t)DmaRxBuffer;     /* Set memory address for DMA again */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <DMA_IrqHandler+0xf8>)
 8000a82:	60da      	str	r2, [r3, #12]
    hdma->Instance->NDTR   = DMA_RX_BUFFER_SIZE;        /* Set number of bytes to receive */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8c:	605a      	str	r2, [r3, #4]
    hdma->Instance->CR    |= DMA_SxCR_EN;               /* Start DMA transfer */
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f042 0201 	orr.w	r2, r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR   |= DMA_CCR_EN;                /* Start DMA transfer */
#else
    #error "Specific STM32 has not been defined"
#endif
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000242a 	.word	0x2000242a
 8000aac:	2000242c 	.word	0x2000242c
 8000ab0:	20002028 	.word	0x20002028

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aba:	e7fe      	b.n	8000aba <Error_Handler+0x6>

08000abc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000ac2:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <MX_SPI3_Init+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000acc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000adc:	2202      	movs	r2, #2
 8000ade:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aec:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000b08:	220a      	movs	r2, #10
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000b0e:	f002 f9b1 	bl	8002e74 <HAL_SPI_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000b18:	f7ff ffcc 	bl	8000ab4 <Error_Handler>
  }

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000262c 	.word	0x2000262c
 8000b24:	40003c00 	.word	0x40003c00

08000b28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	; (8000bac <HAL_SPI_MspInit+0x84>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12c      	bne.n	8000ba4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SCLK_Pin|SDOUT_Pin;
 8000b82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b94:	2306      	movs	r3, #6
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <HAL_SPI_MspInit+0x8c>)
 8000ba0:	f001 fb6a 	bl	8002278 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3728      	adds	r7, #40	; 0x28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40003c00 	.word	0x40003c00
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020800 	.word	0x40020800

08000bb8 <SSD1322_Initialize>:

/* Private user code ---------------------------------------------------------*/


void SSD1322_Initialize(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	// Reset
	SSD1322_Reset();
 8000bbc:	f000 f87e 	bl	8000cbc <SSD1322_Reset>

	// Initialize
	SSD1322_Command(SSD1322_CMD_SETCOMMANDLOCK);// 0xFD
 8000bc0:	20fd      	movs	r0, #253	; 0xfd
 8000bc2:	f000 f897 	bl	8000cf4 <SSD1322_Command>
	SSD1322_Data(0x12);// Unlock OLED driver IC
 8000bc6:	2012      	movs	r0, #18
 8000bc8:	f000 f8a3 	bl	8000d12 <SSD1322_Data>

	SSD1322_Command(SSD1322_CMD_DISPLAYOFF);// 0xAE
 8000bcc:	20ae      	movs	r0, #174	; 0xae
 8000bce:	f000 f891 	bl	8000cf4 <SSD1322_Command>

	SSD1322_Command(SSD1322_CMD_SETCLOCKDIVIDER);// 0xB3
 8000bd2:	20b3      	movs	r0, #179	; 0xb3
 8000bd4:	f000 f88e 	bl	8000cf4 <SSD1322_Command>
	SSD1322_Data(0x91);// 0xB3
 8000bd8:	2091      	movs	r0, #145	; 0x91
 8000bda:	f000 f89a 	bl	8000d12 <SSD1322_Data>

	SSD1322_Command(SSD1322_CMD_SETMUXRATIO);// 0xCA
 8000bde:	20ca      	movs	r0, #202	; 0xca
 8000be0:	f000 f888 	bl	8000cf4 <SSD1322_Command>
	SSD1322_Data(0x3F);// duty = 1/64
 8000be4:	203f      	movs	r0, #63	; 0x3f
 8000be6:	f000 f894 	bl	8000d12 <SSD1322_Data>

	SSD1322_Command(SSD1322_CMD_SETDISPLAYOFFSET);// 0xA2
 8000bea:	20a2      	movs	r0, #162	; 0xa2
 8000bec:	f000 f882 	bl	8000cf4 <SSD1322_Command>
	SSD1322_Data(0x00);
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f000 f88e 	bl	8000d12 <SSD1322_Data>

	SSD1322_Command(SSD1322_CMD_SETSTARTLINE);// 0xA1
 8000bf6:	20a1      	movs	r0, #161	; 0xa1
 8000bf8:	f000 f87c 	bl	8000cf4 <SSD1322_Command>
	SSD1322_Data(0x00);
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f000 f888 	bl	8000d12 <SSD1322_Data>

	SSD1322_Command(SSD1322_CMD_SETREMAP);// 0xA0
 8000c02:	20a0      	movs	r0, #160	; 0xa0
 8000c04:	f000 f876 	bl	8000cf4 <SSD1322_Command>
	SSD1322_Data(0x14);//Horizontal address increment,Disable Column Address Re-map,Enable Nibble Re-map,Scan from COM[N-1] to COM0,Disable COM Split Odd Even
 8000c08:	2014      	movs	r0, #20
 8000c0a:	f000 f882 	bl	8000d12 <SSD1322_Data>
	SSD1322_Data(0x11);//Enable Dual COM mode
 8000c0e:	2011      	movs	r0, #17
 8000c10:	f000 f87f 	bl	8000d12 <SSD1322_Data>

	SSD1322_Command(SSD1322_CMD_SETGPIO);// 0xB5
 8000c14:	20b5      	movs	r0, #181	; 0xb5
 8000c16:	f000 f86d 	bl	8000cf4 <SSD1322_Command>
	SSD1322_Data(0x00);// Disable GPIO Pins Input
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f000 f879 	bl	8000d12 <SSD1322_Data>

	SSD1322_Command(SSD1322_CMD_FUNCTIONSEL);// 0xAB
 8000c20:	20ab      	movs	r0, #171	; 0xab
 8000c22:	f000 f867 	bl	8000cf4 <SSD1322_Command>
	SSD1322_Data(0x01);// selection external vdd
 8000c26:	2001      	movs	r0, #1
 8000c28:	f000 f873 	bl	8000d12 <SSD1322_Data>

	SSD1322_Command(SSD1322_CMD_DISPLAYENHANCE);// 0xB4
 8000c2c:	20b4      	movs	r0, #180	; 0xb4
 8000c2e:	f000 f861 	bl	8000cf4 <SSD1322_Command>
	SSD1322_Data(0xA0);// enables the external VSL
 8000c32:	20a0      	movs	r0, #160	; 0xa0
 8000c34:	f000 f86d 	bl	8000d12 <SSD1322_Data>
	SSD1322_Data(0xFD);// 0xfFD,Enhanced low GS display quality;default is 0xb5(normal),
 8000c38:	20fd      	movs	r0, #253	; 0xfd
 8000c3a:	f000 f86a 	bl	8000d12 <SSD1322_Data>

	SSD1322_Command(SSD1322_CMD_SETCONTRASTCURRENT);// 0xC1
 8000c3e:	20c1      	movs	r0, #193	; 0xc1
 8000c40:	f000 f858 	bl	8000cf4 <SSD1322_Command>
	SSD1322_Data(0xFF);// 0xFF - default is 0x7f
 8000c44:	20ff      	movs	r0, #255	; 0xff
 8000c46:	f000 f864 	bl	8000d12 <SSD1322_Data>

	SSD1322_Command(SSD1322_CMD_MASTERCURRENTCONTROL);// 0xC7
 8000c4a:	20c7      	movs	r0, #199	; 0xc7
 8000c4c:	f000 f852 	bl	8000cf4 <SSD1322_Command>
	SSD1322_Data(0x0F);// default is 0x0F
 8000c50:	200f      	movs	r0, #15
 8000c52:	f000 f85e 	bl	8000d12 <SSD1322_Data>

	// Set grayscale
	SSD1322_Command(SSD1322_CMD_SELECTDEFAULTGRAYSCALE); // 0xB9
 8000c56:	20b9      	movs	r0, #185	; 0xb9
 8000c58:	f000 f84c 	bl	8000cf4 <SSD1322_Command>

	SSD1322_Command(SSD1322_CMD_SETPHASELENGTH);// 0xB1
 8000c5c:	20b1      	movs	r0, #177	; 0xb1
 8000c5e:	f000 f849 	bl	8000cf4 <SSD1322_Command>
	SSD1322_Data(0xE2);// default is 0x74
 8000c62:	20e2      	movs	r0, #226	; 0xe2
 8000c64:	f000 f855 	bl	8000d12 <SSD1322_Data>

	SSD1322_Command(SSD1322_CMD_DISPLAYENHANCEB);// 0xD1
 8000c68:	20d1      	movs	r0, #209	; 0xd1
 8000c6a:	f000 f843 	bl	8000cf4 <SSD1322_Command>
	SSD1322_Data(0x82);// Reserved;default is 0xa2(normal)
 8000c6e:	2082      	movs	r0, #130	; 0x82
 8000c70:	f000 f84f 	bl	8000d12 <SSD1322_Data>
	SSD1322_Data(0x20);//
 8000c74:	2020      	movs	r0, #32
 8000c76:	f000 f84c 	bl	8000d12 <SSD1322_Data>

	SSD1322_Command(SSD1322_CMD_SETPRECHARGEVOLTAGE);// 0xBB
 8000c7a:	20bb      	movs	r0, #187	; 0xbb
 8000c7c:	f000 f83a 	bl	8000cf4 <SSD1322_Command>
	SSD1322_Data(0x1F);// 0.6xVcc
 8000c80:	201f      	movs	r0, #31
 8000c82:	f000 f846 	bl	8000d12 <SSD1322_Data>

	SSD1322_Command(SSD1322_CMD_SETSECONDPRECHARGEPERIOD);// 0xB6
 8000c86:	20b6      	movs	r0, #182	; 0xb6
 8000c88:	f000 f834 	bl	8000cf4 <SSD1322_Command>
	SSD1322_Data(0x08);// default
 8000c8c:	2008      	movs	r0, #8
 8000c8e:	f000 f840 	bl	8000d12 <SSD1322_Data>

	SSD1322_Command(SSD1322_CMD_SETVCOMH);// 0xBE
 8000c92:	20be      	movs	r0, #190	; 0xbe
 8000c94:	f000 f82e 	bl	8000cf4 <SSD1322_Command>
	SSD1322_Data(0x07);// 0.86xVcc;default is 0x04
 8000c98:	2007      	movs	r0, #7
 8000c9a:	f000 f83a 	bl	8000d12 <SSD1322_Data>

	SSD1322_Command(SSD1322_CMD_NORMALDISPLAY);// 0xA6
 8000c9e:	20a6      	movs	r0, #166	; 0xa6
 8000ca0:	f000 f828 	bl	8000cf4 <SSD1322_Command>

	SSD1322_Command(SSD1322_CMD_EXITPARTIALDISPLAY);// 0xA9
 8000ca4:	20a9      	movs	r0, #169	; 0xa9
 8000ca6:	f000 f825 	bl	8000cf4 <SSD1322_Command>

	// Clear down image ram before opening display
	SSD1322_Fill(0x00);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 f8b0 	bl	8000e10 <SSD1322_Fill>

	// Turn Display ON
	SSD1322_Command(SSD1322_CMD_DISPLAYON);// 0xAF
 8000cb0:	20af      	movs	r0, #175	; 0xaf
 8000cb2:	f000 f81f 	bl	8000cf4 <SSD1322_Command>
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <SSD1322_Reset>:


void SSD1322_Reset(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	// Release RESET pin
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2104      	movs	r1, #4
 8000cc4:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <SSD1322_Reset+0x34>)
 8000cc6:	f001 fc59 	bl	800257c <HAL_GPIO_WritePin>

	// Wait for 100ms
	HAL_Delay(100);
 8000cca:	2064      	movs	r0, #100	; 0x64
 8000ccc:	f000 ff9a 	bl	8001c04 <HAL_Delay>

	// Set RESET pin
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2104      	movs	r1, #4
 8000cd4:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <SSD1322_Reset+0x34>)
 8000cd6:	f001 fc51 	bl	800257c <HAL_GPIO_WritePin>

	// Wait for 400ms
	HAL_Delay(400);
 8000cda:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000cde:	f000 ff91 	bl	8001c04 <HAL_Delay>

	// Release RESET pin
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2104      	movs	r1, #4
 8000ce6:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <SSD1322_Reset+0x34>)
 8000ce8:	f001 fc48 	bl	800257c <HAL_GPIO_WritePin>
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40020c00 	.word	0x40020c00

08000cf4 <SSD1322_Command>:


void SSD1322_Command(uint8_t command)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  SSD1322_Write(1, &command, 1);
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	2201      	movs	r2, #1
 8000d02:	4619      	mov	r1, r3
 8000d04:	2001      	movs	r0, #1
 8000d06:	f000 f823 	bl	8000d50 <SSD1322_Write>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <SSD1322_Data>:


void SSD1322_Data(uint8_t data)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	71fb      	strb	r3, [r7, #7]
  SSD1322_Write(0, &data, 1);
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4619      	mov	r1, r3
 8000d22:	2000      	movs	r0, #0
 8000d24:	f000 f814 	bl	8000d50 <SSD1322_Write>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <SSD1322_DataBytes>:


void SSD1322_DataBytes(uint8_t* data, uint16_t length)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
  SSD1322_Write(0, data, length);
 8000d3c:	887b      	ldrh	r3, [r7, #2]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f804 	bl	8000d50 <SSD1322_Write>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <SSD1322_Write>:


void SSD1322_Write(uint8_t isCommand, uint8_t* payload, uint16_t length)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	80bb      	strh	r3, [r7, #4]
  // Set CS pin high
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d66:	4814      	ldr	r0, [pc, #80]	; (8000db8 <SSD1322_Write+0x68>)
 8000d68:	f001 fc08 	bl	800257c <HAL_GPIO_WritePin>

  if (isCommand)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d005      	beq.n	8000d7e <SSD1322_Write+0x2e>
  {
    // Command - Set DC pin low
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2101      	movs	r1, #1
 8000d76:	4810      	ldr	r0, [pc, #64]	; (8000db8 <SSD1322_Write+0x68>)
 8000d78:	f001 fc00 	bl	800257c <HAL_GPIO_WritePin>
 8000d7c:	e004      	b.n	8000d88 <SSD1322_Write+0x38>
  }
  else
  {
    // Data - Set DC pin high
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2101      	movs	r1, #1
 8000d82:	480d      	ldr	r0, [pc, #52]	; (8000db8 <SSD1322_Write+0x68>)
 8000d84:	f001 fbfa 	bl	800257c <HAL_GPIO_WritePin>
  }

  // Set CS pin low
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8e:	480a      	ldr	r0, [pc, #40]	; (8000db8 <SSD1322_Write+0x68>)
 8000d90:	f001 fbf4 	bl	800257c <HAL_GPIO_WritePin>

  // Write command
  HAL_SPI_Transmit(&hspi3, payload, length, 1000);
 8000d94:	88ba      	ldrh	r2, [r7, #4]
 8000d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9a:	6839      	ldr	r1, [r7, #0]
 8000d9c:	4807      	ldr	r0, [pc, #28]	; (8000dbc <SSD1322_Write+0x6c>)
 8000d9e:	f002 f8cd 	bl	8002f3c <HAL_SPI_Transmit>

  // Set CS pin high
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <SSD1322_Write+0x68>)
 8000daa:	f001 fbe7 	bl	800257c <HAL_GPIO_WritePin>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40020800 	.word	0x40020800
 8000dbc:	2000262c 	.word	0x2000262c

08000dc0 <SSD1322_Display>:


void SSD1322_Display(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  SSD1322_Command(SSD1322_CMD_SETCOLUMNADDR);
 8000dc6:	2015      	movs	r0, #21
 8000dc8:	f7ff ff94 	bl	8000cf4 <SSD1322_Command>
  SSD1322_Data(SSD1322_MIN_SEG);
 8000dcc:	201c      	movs	r0, #28
 8000dce:	f7ff ffa0 	bl	8000d12 <SSD1322_Data>
  SSD1322_Data(SSD1322_MAX_SEG);
 8000dd2:	205b      	movs	r0, #91	; 0x5b
 8000dd4:	f7ff ff9d 	bl	8000d12 <SSD1322_Data>

  SSD1322_Command(SSD1322_CMD_SETROWADDR);
 8000dd8:	2075      	movs	r0, #117	; 0x75
 8000dda:	f7ff ff8b 	bl	8000cf4 <SSD1322_Command>
  SSD1322_Data(0);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff ff97 	bl	8000d12 <SSD1322_Data>
  SSD1322_Data(63);
 8000de4:	203f      	movs	r0, #63	; 0x3f
 8000de6:	f7ff ff94 	bl	8000d12 <SSD1322_Data>

  SSD1322_Command(SSD1322_CMD_WRITERAM);
 8000dea:	205c      	movs	r0, #92	; 0x5c
 8000dec:	f7ff ff82 	bl	8000cf4 <SSD1322_Command>

  uint16_t bufSize = (SSD1322_LCDHEIGHT * SSD1322_LCDWIDTH / (8 / SSD1322_BITS_PER_PIXEL)); // bytes
 8000df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df4:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf = buffer;
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SSD1322_Display+0x4c>)
 8000df8:	603b      	str	r3, [r7, #0]

#ifdef SSD1322_256_64_4
  // Write as quickly as possible
  SSD1322_DataBytes(pBuf, bufSize);
 8000dfa:	88fb      	ldrh	r3, [r7, #6]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	6838      	ldr	r0, [r7, #0]
 8000e00:	f7ff ff96 	bl	8000d30 <SSD1322_DataBytes>
    }
    // Send to display here.
    ssd1322_dataBytes(destArray, 64);
  }
#endif
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000028 	.word	0x20000028

08000e10 <SSD1322_Fill>:


void SSD1322_Fill(uint8_t color)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  uint8_t x;
  uint8_t y;

  // Set column
  SSD1322_Command(SSD1322_CMD_SETCOLUMNADDR);
 8000e1a:	2015      	movs	r0, #21
 8000e1c:	f7ff ff6a 	bl	8000cf4 <SSD1322_Command>
  SSD1322_Data(SSD1322_MIN_SEG);
 8000e20:	201c      	movs	r0, #28
 8000e22:	f7ff ff76 	bl	8000d12 <SSD1322_Data>
  SSD1322_Data(SSD1322_MAX_SEG);
 8000e26:	205b      	movs	r0, #91	; 0x5b
 8000e28:	f7ff ff73 	bl	8000d12 <SSD1322_Data>

  // Set row
  SSD1322_Command(SSD1322_CMD_SETROWADDR);
 8000e2c:	2075      	movs	r0, #117	; 0x75
 8000e2e:	f7ff ff61 	bl	8000cf4 <SSD1322_Command>
  SSD1322_Data(0);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff ff6d 	bl	8000d12 <SSD1322_Data>
  SSD1322_Data(63);
 8000e38:	203f      	movs	r0, #63	; 0x3f
 8000e3a:	f7ff ff6a 	bl	8000d12 <SSD1322_Data>

  // Set color
  color = (color & 0x0F) | (color << 4);
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	b25a      	sxtb	r2, r3
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	b25b      	sxtb	r3, r3
 8000e52:	71fb      	strb	r3, [r7, #7]

  // Set Write RAM command
  SSD1322_Command(SSD1322_CMD_WRITERAM);
 8000e54:	205c      	movs	r0, #92	; 0x5c
 8000e56:	f7ff ff4d 	bl	8000cf4 <SSD1322_Command>

  // Write data
  for (y = 0; y < 64; y++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	73bb      	strb	r3, [r7, #14]
 8000e5e:	e010      	b.n	8000e82 <SSD1322_Fill+0x72>
  {
    for (x = 0; x < 128; x++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	e006      	b.n	8000e74 <SSD1322_Fill+0x64>
    {
      SSD1322_Data(color);
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff52 	bl	8000d12 <SSD1322_Data>
    for (x = 0; x < 128; x++)
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	3301      	adds	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	daf4      	bge.n	8000e66 <SSD1322_Fill+0x56>
  for (y = 0; y < 64; y++)
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	73bb      	strb	r3, [r7, #14]
 8000e82:	7bbb      	ldrb	r3, [r7, #14]
 8000e84:	2b3f      	cmp	r3, #63	; 0x3f
 8000e86:	d9eb      	bls.n	8000e60 <SSD1322_Fill+0x50>
    }
  }

  HAL_Delay(0);
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f000 febb 	bl	8001c04 <HAL_Delay>
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <SSD1322_DrawUnicode>:

  return 1;
}
#else
int SSD1322_DrawUnicode(unsigned int uniCode, int x, int y, uint8_t invert)
{
 8000e98:	b490      	push	{r4, r7}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	70fb      	strb	r3, [r7, #3]
  uint16_t rowData;
  uint8_t  pixelMask;
  uint8_t  pixelValue = 0xFF;
 8000ea6:	23ff      	movs	r3, #255	; 0xff
 8000ea8:	757b      	strb	r3, [r7, #21]
  const uint16_t* pCharacter;

  switch (uniCode)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2b63      	cmp	r3, #99	; 0x63
 8000eae:	f000 8299 	beq.w	80013e4 <SSD1322_DrawUnicode+0x54c>
 8000eb2:	2b63      	cmp	r3, #99	; 0x63
 8000eb4:	f200 80d0 	bhi.w	8001058 <SSD1322_DrawUnicode+0x1c0>
 8000eb8:	2b40      	cmp	r3, #64	; 0x40
 8000eba:	f000 822d 	beq.w	8001318 <SSD1322_DrawUnicode+0x480>
 8000ebe:	2b40      	cmp	r3, #64	; 0x40
 8000ec0:	d863      	bhi.n	8000f8a <SSD1322_DrawUnicode+0xf2>
 8000ec2:	2b2f      	cmp	r3, #47	; 0x2f
 8000ec4:	f000 81f5 	beq.w	80012b2 <SSD1322_DrawUnicode+0x41a>
 8000ec8:	2b2f      	cmp	r3, #47	; 0x2f
 8000eca:	d82d      	bhi.n	8000f28 <SSD1322_DrawUnicode+0x90>
 8000ecc:	2b27      	cmp	r3, #39	; 0x27
 8000ece:	f000 81d8 	beq.w	8001282 <SSD1322_DrawUnicode+0x3ea>
 8000ed2:	2b27      	cmp	r3, #39	; 0x27
 8000ed4:	d815      	bhi.n	8000f02 <SSD1322_DrawUnicode+0x6a>
 8000ed6:	2b23      	cmp	r3, #35	; 0x23
 8000ed8:	f000 81c7 	beq.w	800126a <SSD1322_DrawUnicode+0x3d2>
 8000edc:	2b23      	cmp	r3, #35	; 0x23
 8000ede:	d809      	bhi.n	8000ef4 <SSD1322_DrawUnicode+0x5c>
 8000ee0:	2b21      	cmp	r3, #33	; 0x21
 8000ee2:	f000 81bc 	beq.w	800125e <SSD1322_DrawUnicode+0x3c6>
 8000ee6:	2b21      	cmp	r3, #33	; 0x21
 8000ee8:	f200 81bc 	bhi.w	8001264 <SSD1322_DrawUnicode+0x3cc>
 8000eec:	2b20      	cmp	r3, #32
 8000eee:	f000 81b3 	beq.w	8001258 <SSD1322_DrawUnicode+0x3c0>
 8000ef2:	e3eb      	b.n	80016cc <SSD1322_DrawUnicode+0x834>
 8000ef4:	2b25      	cmp	r3, #37	; 0x25
 8000ef6:	f000 81be 	beq.w	8001276 <SSD1322_DrawUnicode+0x3de>
 8000efa:	2b25      	cmp	r3, #37	; 0x25
 8000efc:	f200 81be 	bhi.w	800127c <SSD1322_DrawUnicode+0x3e4>
 8000f00:	e1b6      	b.n	8001270 <SSD1322_DrawUnicode+0x3d8>
 8000f02:	2b2b      	cmp	r3, #43	; 0x2b
 8000f04:	f000 81c9 	beq.w	800129a <SSD1322_DrawUnicode+0x402>
 8000f08:	2b2b      	cmp	r3, #43	; 0x2b
 8000f0a:	d806      	bhi.n	8000f1a <SSD1322_DrawUnicode+0x82>
 8000f0c:	2b29      	cmp	r3, #41	; 0x29
 8000f0e:	f000 81be 	beq.w	800128e <SSD1322_DrawUnicode+0x3f6>
 8000f12:	2b29      	cmp	r3, #41	; 0x29
 8000f14:	f200 81be 	bhi.w	8001294 <SSD1322_DrawUnicode+0x3fc>
 8000f18:	e1b6      	b.n	8001288 <SSD1322_DrawUnicode+0x3f0>
 8000f1a:	2b2d      	cmp	r3, #45	; 0x2d
 8000f1c:	f000 81c3 	beq.w	80012a6 <SSD1322_DrawUnicode+0x40e>
 8000f20:	2b2d      	cmp	r3, #45	; 0x2d
 8000f22:	f200 81c3 	bhi.w	80012ac <SSD1322_DrawUnicode+0x414>
 8000f26:	e1bb      	b.n	80012a0 <SSD1322_DrawUnicode+0x408>
 8000f28:	2b37      	cmp	r3, #55	; 0x37
 8000f2a:	f000 81da 	beq.w	80012e2 <SSD1322_DrawUnicode+0x44a>
 8000f2e:	2b37      	cmp	r3, #55	; 0x37
 8000f30:	d812      	bhi.n	8000f58 <SSD1322_DrawUnicode+0xc0>
 8000f32:	2b33      	cmp	r3, #51	; 0x33
 8000f34:	f000 81c9 	beq.w	80012ca <SSD1322_DrawUnicode+0x432>
 8000f38:	2b33      	cmp	r3, #51	; 0x33
 8000f3a:	d806      	bhi.n	8000f4a <SSD1322_DrawUnicode+0xb2>
 8000f3c:	2b31      	cmp	r3, #49	; 0x31
 8000f3e:	f000 81be 	beq.w	80012be <SSD1322_DrawUnicode+0x426>
 8000f42:	2b31      	cmp	r3, #49	; 0x31
 8000f44:	f200 81be 	bhi.w	80012c4 <SSD1322_DrawUnicode+0x42c>
 8000f48:	e1b6      	b.n	80012b8 <SSD1322_DrawUnicode+0x420>
 8000f4a:	2b35      	cmp	r3, #53	; 0x35
 8000f4c:	f000 81c3 	beq.w	80012d6 <SSD1322_DrawUnicode+0x43e>
 8000f50:	2b35      	cmp	r3, #53	; 0x35
 8000f52:	f200 81c3 	bhi.w	80012dc <SSD1322_DrawUnicode+0x444>
 8000f56:	e1bb      	b.n	80012d0 <SSD1322_DrawUnicode+0x438>
 8000f58:	2b3b      	cmp	r3, #59	; 0x3b
 8000f5a:	f000 81ce 	beq.w	80012fa <SSD1322_DrawUnicode+0x462>
 8000f5e:	2b3b      	cmp	r3, #59	; 0x3b
 8000f60:	d806      	bhi.n	8000f70 <SSD1322_DrawUnicode+0xd8>
 8000f62:	2b39      	cmp	r3, #57	; 0x39
 8000f64:	f000 81c3 	beq.w	80012ee <SSD1322_DrawUnicode+0x456>
 8000f68:	2b39      	cmp	r3, #57	; 0x39
 8000f6a:	f200 81c3 	bhi.w	80012f4 <SSD1322_DrawUnicode+0x45c>
 8000f6e:	e1bb      	b.n	80012e8 <SSD1322_DrawUnicode+0x450>
 8000f70:	2b3d      	cmp	r3, #61	; 0x3d
 8000f72:	f000 81c8 	beq.w	8001306 <SSD1322_DrawUnicode+0x46e>
 8000f76:	2b3d      	cmp	r3, #61	; 0x3d
 8000f78:	f0c0 81c2 	bcc.w	8001300 <SSD1322_DrawUnicode+0x468>
 8000f7c:	2b3e      	cmp	r3, #62	; 0x3e
 8000f7e:	f000 81c5 	beq.w	800130c <SSD1322_DrawUnicode+0x474>
 8000f82:	2b3f      	cmp	r3, #63	; 0x3f
 8000f84:	f000 81c5 	beq.w	8001312 <SSD1322_DrawUnicode+0x47a>
 8000f88:	e3a0      	b.n	80016cc <SSD1322_DrawUnicode+0x834>
 8000f8a:	2b51      	cmp	r3, #81	; 0x51
 8000f8c:	f000 81f7 	beq.w	800137e <SSD1322_DrawUnicode+0x4e6>
 8000f90:	2b51      	cmp	r3, #81	; 0x51
 8000f92:	d830      	bhi.n	8000ff6 <SSD1322_DrawUnicode+0x15e>
 8000f94:	2b48      	cmp	r3, #72	; 0x48
 8000f96:	f000 81d7 	beq.w	8001348 <SSD1322_DrawUnicode+0x4b0>
 8000f9a:	2b48      	cmp	r3, #72	; 0x48
 8000f9c:	d812      	bhi.n	8000fc4 <SSD1322_DrawUnicode+0x12c>
 8000f9e:	2b44      	cmp	r3, #68	; 0x44
 8000fa0:	f000 81c6 	beq.w	8001330 <SSD1322_DrawUnicode+0x498>
 8000fa4:	2b44      	cmp	r3, #68	; 0x44
 8000fa6:	d806      	bhi.n	8000fb6 <SSD1322_DrawUnicode+0x11e>
 8000fa8:	2b42      	cmp	r3, #66	; 0x42
 8000faa:	f000 81bb 	beq.w	8001324 <SSD1322_DrawUnicode+0x48c>
 8000fae:	2b42      	cmp	r3, #66	; 0x42
 8000fb0:	f200 81bb 	bhi.w	800132a <SSD1322_DrawUnicode+0x492>
 8000fb4:	e1b3      	b.n	800131e <SSD1322_DrawUnicode+0x486>
 8000fb6:	2b46      	cmp	r3, #70	; 0x46
 8000fb8:	f000 81c0 	beq.w	800133c <SSD1322_DrawUnicode+0x4a4>
 8000fbc:	2b46      	cmp	r3, #70	; 0x46
 8000fbe:	f200 81c0 	bhi.w	8001342 <SSD1322_DrawUnicode+0x4aa>
 8000fc2:	e1b8      	b.n	8001336 <SSD1322_DrawUnicode+0x49e>
 8000fc4:	2b4c      	cmp	r3, #76	; 0x4c
 8000fc6:	f000 81cb 	beq.w	8001360 <SSD1322_DrawUnicode+0x4c8>
 8000fca:	2b4c      	cmp	r3, #76	; 0x4c
 8000fcc:	d806      	bhi.n	8000fdc <SSD1322_DrawUnicode+0x144>
 8000fce:	2b4a      	cmp	r3, #74	; 0x4a
 8000fd0:	f000 81c0 	beq.w	8001354 <SSD1322_DrawUnicode+0x4bc>
 8000fd4:	2b4a      	cmp	r3, #74	; 0x4a
 8000fd6:	f200 81c0 	bhi.w	800135a <SSD1322_DrawUnicode+0x4c2>
 8000fda:	e1b8      	b.n	800134e <SSD1322_DrawUnicode+0x4b6>
 8000fdc:	2b4e      	cmp	r3, #78	; 0x4e
 8000fde:	f000 81c5 	beq.w	800136c <SSD1322_DrawUnicode+0x4d4>
 8000fe2:	2b4e      	cmp	r3, #78	; 0x4e
 8000fe4:	f0c0 81bf 	bcc.w	8001366 <SSD1322_DrawUnicode+0x4ce>
 8000fe8:	2b4f      	cmp	r3, #79	; 0x4f
 8000fea:	f000 81c2 	beq.w	8001372 <SSD1322_DrawUnicode+0x4da>
 8000fee:	2b50      	cmp	r3, #80	; 0x50
 8000ff0:	f000 81c2 	beq.w	8001378 <SSD1322_DrawUnicode+0x4e0>
 8000ff4:	e36a      	b.n	80016cc <SSD1322_DrawUnicode+0x834>
 8000ff6:	2b59      	cmp	r3, #89	; 0x59
 8000ff8:	f000 81d9 	beq.w	80013ae <SSD1322_DrawUnicode+0x516>
 8000ffc:	2b59      	cmp	r3, #89	; 0x59
 8000ffe:	d812      	bhi.n	8001026 <SSD1322_DrawUnicode+0x18e>
 8001000:	2b55      	cmp	r3, #85	; 0x55
 8001002:	f000 81c8 	beq.w	8001396 <SSD1322_DrawUnicode+0x4fe>
 8001006:	2b55      	cmp	r3, #85	; 0x55
 8001008:	d806      	bhi.n	8001018 <SSD1322_DrawUnicode+0x180>
 800100a:	2b53      	cmp	r3, #83	; 0x53
 800100c:	f000 81bd 	beq.w	800138a <SSD1322_DrawUnicode+0x4f2>
 8001010:	2b53      	cmp	r3, #83	; 0x53
 8001012:	f200 81bd 	bhi.w	8001390 <SSD1322_DrawUnicode+0x4f8>
 8001016:	e1b5      	b.n	8001384 <SSD1322_DrawUnicode+0x4ec>
 8001018:	2b57      	cmp	r3, #87	; 0x57
 800101a:	f000 81c2 	beq.w	80013a2 <SSD1322_DrawUnicode+0x50a>
 800101e:	2b57      	cmp	r3, #87	; 0x57
 8001020:	f200 81c2 	bhi.w	80013a8 <SSD1322_DrawUnicode+0x510>
 8001024:	e1ba      	b.n	800139c <SSD1322_DrawUnicode+0x504>
 8001026:	2b5d      	cmp	r3, #93	; 0x5d
 8001028:	f000 81cd 	beq.w	80013c6 <SSD1322_DrawUnicode+0x52e>
 800102c:	2b5d      	cmp	r3, #93	; 0x5d
 800102e:	d806      	bhi.n	800103e <SSD1322_DrawUnicode+0x1a6>
 8001030:	2b5b      	cmp	r3, #91	; 0x5b
 8001032:	f000 81c2 	beq.w	80013ba <SSD1322_DrawUnicode+0x522>
 8001036:	2b5b      	cmp	r3, #91	; 0x5b
 8001038:	f200 81c2 	bhi.w	80013c0 <SSD1322_DrawUnicode+0x528>
 800103c:	e1ba      	b.n	80013b4 <SSD1322_DrawUnicode+0x51c>
 800103e:	2b5f      	cmp	r3, #95	; 0x5f
 8001040:	f000 81c7 	beq.w	80013d2 <SSD1322_DrawUnicode+0x53a>
 8001044:	2b5f      	cmp	r3, #95	; 0x5f
 8001046:	f0c0 81c1 	bcc.w	80013cc <SSD1322_DrawUnicode+0x534>
 800104a:	2b61      	cmp	r3, #97	; 0x61
 800104c:	f000 81c4 	beq.w	80013d8 <SSD1322_DrawUnicode+0x540>
 8001050:	2b62      	cmp	r3, #98	; 0x62
 8001052:	f000 81c4 	beq.w	80013de <SSD1322_DrawUnicode+0x546>
 8001056:	e339      	b.n	80016cc <SSD1322_DrawUnicode+0x834>
 8001058:	2ba9      	cmp	r3, #169	; 0xa9
 800105a:	f000 82d1 	beq.w	8001600 <SSD1322_DrawUnicode+0x768>
 800105e:	2ba9      	cmp	r3, #169	; 0xa9
 8001060:	d869      	bhi.n	8001136 <SSD1322_DrawUnicode+0x29e>
 8001062:	2b74      	cmp	r3, #116	; 0x74
 8001064:	f000 81f1 	beq.w	800144a <SSD1322_DrawUnicode+0x5b2>
 8001068:	2b74      	cmp	r3, #116	; 0x74
 800106a:	d830      	bhi.n	80010ce <SSD1322_DrawUnicode+0x236>
 800106c:	2b6b      	cmp	r3, #107	; 0x6b
 800106e:	f000 81d1 	beq.w	8001414 <SSD1322_DrawUnicode+0x57c>
 8001072:	2b6b      	cmp	r3, #107	; 0x6b
 8001074:	d812      	bhi.n	800109c <SSD1322_DrawUnicode+0x204>
 8001076:	2b67      	cmp	r3, #103	; 0x67
 8001078:	f000 81c0 	beq.w	80013fc <SSD1322_DrawUnicode+0x564>
 800107c:	2b67      	cmp	r3, #103	; 0x67
 800107e:	d806      	bhi.n	800108e <SSD1322_DrawUnicode+0x1f6>
 8001080:	2b65      	cmp	r3, #101	; 0x65
 8001082:	f000 81b5 	beq.w	80013f0 <SSD1322_DrawUnicode+0x558>
 8001086:	2b65      	cmp	r3, #101	; 0x65
 8001088:	f200 81b5 	bhi.w	80013f6 <SSD1322_DrawUnicode+0x55e>
 800108c:	e1ad      	b.n	80013ea <SSD1322_DrawUnicode+0x552>
 800108e:	2b69      	cmp	r3, #105	; 0x69
 8001090:	f000 81ba 	beq.w	8001408 <SSD1322_DrawUnicode+0x570>
 8001094:	2b69      	cmp	r3, #105	; 0x69
 8001096:	f200 81ba 	bhi.w	800140e <SSD1322_DrawUnicode+0x576>
 800109a:	e1b2      	b.n	8001402 <SSD1322_DrawUnicode+0x56a>
 800109c:	2b6f      	cmp	r3, #111	; 0x6f
 800109e:	f000 81c5 	beq.w	800142c <SSD1322_DrawUnicode+0x594>
 80010a2:	2b6f      	cmp	r3, #111	; 0x6f
 80010a4:	d806      	bhi.n	80010b4 <SSD1322_DrawUnicode+0x21c>
 80010a6:	2b6d      	cmp	r3, #109	; 0x6d
 80010a8:	f000 81ba 	beq.w	8001420 <SSD1322_DrawUnicode+0x588>
 80010ac:	2b6d      	cmp	r3, #109	; 0x6d
 80010ae:	f200 81ba 	bhi.w	8001426 <SSD1322_DrawUnicode+0x58e>
 80010b2:	e1b2      	b.n	800141a <SSD1322_DrawUnicode+0x582>
 80010b4:	2b71      	cmp	r3, #113	; 0x71
 80010b6:	f000 81bf 	beq.w	8001438 <SSD1322_DrawUnicode+0x5a0>
 80010ba:	2b71      	cmp	r3, #113	; 0x71
 80010bc:	f0c0 81b9 	bcc.w	8001432 <SSD1322_DrawUnicode+0x59a>
 80010c0:	2b72      	cmp	r3, #114	; 0x72
 80010c2:	f000 81bc 	beq.w	800143e <SSD1322_DrawUnicode+0x5a6>
 80010c6:	2b73      	cmp	r3, #115	; 0x73
 80010c8:	f000 81bc 	beq.w	8001444 <SSD1322_DrawUnicode+0x5ac>
 80010cc:	e2fe      	b.n	80016cc <SSD1322_DrawUnicode+0x834>
 80010ce:	2b7c      	cmp	r3, #124	; 0x7c
 80010d0:	f000 827b 	beq.w	80015ca <SSD1322_DrawUnicode+0x732>
 80010d4:	2b7c      	cmp	r3, #124	; 0x7c
 80010d6:	d812      	bhi.n	80010fe <SSD1322_DrawUnicode+0x266>
 80010d8:	2b78      	cmp	r3, #120	; 0x78
 80010da:	f000 826a 	beq.w	80015b2 <SSD1322_DrawUnicode+0x71a>
 80010de:	2b78      	cmp	r3, #120	; 0x78
 80010e0:	d806      	bhi.n	80010f0 <SSD1322_DrawUnicode+0x258>
 80010e2:	2b76      	cmp	r3, #118	; 0x76
 80010e4:	f000 825f 	beq.w	80015a6 <SSD1322_DrawUnicode+0x70e>
 80010e8:	2b76      	cmp	r3, #118	; 0x76
 80010ea:	f200 825f 	bhi.w	80015ac <SSD1322_DrawUnicode+0x714>
 80010ee:	e257      	b.n	80015a0 <SSD1322_DrawUnicode+0x708>
 80010f0:	2b7a      	cmp	r3, #122	; 0x7a
 80010f2:	f000 8264 	beq.w	80015be <SSD1322_DrawUnicode+0x726>
 80010f6:	2b7a      	cmp	r3, #122	; 0x7a
 80010f8:	f200 8264 	bhi.w	80015c4 <SSD1322_DrawUnicode+0x72c>
 80010fc:	e25c      	b.n	80015b8 <SSD1322_DrawUnicode+0x720>
 80010fe:	2ba2      	cmp	r3, #162	; 0xa2
 8001100:	f000 826f 	beq.w	80015e2 <SSD1322_DrawUnicode+0x74a>
 8001104:	2ba2      	cmp	r3, #162	; 0xa2
 8001106:	d809      	bhi.n	800111c <SSD1322_DrawUnicode+0x284>
 8001108:	2ba0      	cmp	r3, #160	; 0xa0
 800110a:	f000 8264 	beq.w	80015d6 <SSD1322_DrawUnicode+0x73e>
 800110e:	2ba0      	cmp	r3, #160	; 0xa0
 8001110:	f200 8264 	bhi.w	80015dc <SSD1322_DrawUnicode+0x744>
 8001114:	2b7d      	cmp	r3, #125	; 0x7d
 8001116:	f000 825b 	beq.w	80015d0 <SSD1322_DrawUnicode+0x738>
 800111a:	e2d7      	b.n	80016cc <SSD1322_DrawUnicode+0x834>
 800111c:	2ba4      	cmp	r3, #164	; 0xa4
 800111e:	f000 8266 	beq.w	80015ee <SSD1322_DrawUnicode+0x756>
 8001122:	2ba4      	cmp	r3, #164	; 0xa4
 8001124:	f0c0 8260 	bcc.w	80015e8 <SSD1322_DrawUnicode+0x750>
 8001128:	2ba6      	cmp	r3, #166	; 0xa6
 800112a:	f000 8263 	beq.w	80015f4 <SSD1322_DrawUnicode+0x75c>
 800112e:	2ba8      	cmp	r3, #168	; 0xa8
 8001130:	f000 8263 	beq.w	80015fa <SSD1322_DrawUnicode+0x762>
 8001134:	e2ca      	b.n	80016cc <SSD1322_DrawUnicode+0x834>
 8001136:	2bc4      	cmp	r3, #196	; 0xc4
 8001138:	f000 8295 	beq.w	8001666 <SSD1322_DrawUnicode+0x7ce>
 800113c:	2bc4      	cmp	r3, #196	; 0xc4
 800113e:	d839      	bhi.n	80011b4 <SSD1322_DrawUnicode+0x31c>
 8001140:	2bb6      	cmp	r3, #182	; 0xb6
 8001142:	f000 8275 	beq.w	8001630 <SSD1322_DrawUnicode+0x798>
 8001146:	2bb6      	cmp	r3, #182	; 0xb6
 8001148:	d818      	bhi.n	800117c <SSD1322_DrawUnicode+0x2e4>
 800114a:	2bae      	cmp	r3, #174	; 0xae
 800114c:	f000 8264 	beq.w	8001618 <SSD1322_DrawUnicode+0x780>
 8001150:	2bae      	cmp	r3, #174	; 0xae
 8001152:	d809      	bhi.n	8001168 <SSD1322_DrawUnicode+0x2d0>
 8001154:	2bab      	cmp	r3, #171	; 0xab
 8001156:	f000 8259 	beq.w	800160c <SSD1322_DrawUnicode+0x774>
 800115a:	2bab      	cmp	r3, #171	; 0xab
 800115c:	f0c0 8253 	bcc.w	8001606 <SSD1322_DrawUnicode+0x76e>
 8001160:	2bac      	cmp	r3, #172	; 0xac
 8001162:	f000 8256 	beq.w	8001612 <SSD1322_DrawUnicode+0x77a>
 8001166:	e2b1      	b.n	80016cc <SSD1322_DrawUnicode+0x834>
 8001168:	2bb0      	cmp	r3, #176	; 0xb0
 800116a:	f000 825b 	beq.w	8001624 <SSD1322_DrawUnicode+0x78c>
 800116e:	2bb0      	cmp	r3, #176	; 0xb0
 8001170:	f0c0 8255 	bcc.w	800161e <SSD1322_DrawUnicode+0x786>
 8001174:	2bb1      	cmp	r3, #177	; 0xb1
 8001176:	f000 8258 	beq.w	800162a <SSD1322_DrawUnicode+0x792>
 800117a:	e2a7      	b.n	80016cc <SSD1322_DrawUnicode+0x834>
 800117c:	2bbf      	cmp	r3, #191	; 0xbf
 800117e:	f000 8263 	beq.w	8001648 <SSD1322_DrawUnicode+0x7b0>
 8001182:	2bbf      	cmp	r3, #191	; 0xbf
 8001184:	d809      	bhi.n	800119a <SSD1322_DrawUnicode+0x302>
 8001186:	2bba      	cmp	r3, #186	; 0xba
 8001188:	f000 8258 	beq.w	800163c <SSD1322_DrawUnicode+0x7a4>
 800118c:	2bbb      	cmp	r3, #187	; 0xbb
 800118e:	f000 8258 	beq.w	8001642 <SSD1322_DrawUnicode+0x7aa>
 8001192:	2bb9      	cmp	r3, #185	; 0xb9
 8001194:	f000 824f 	beq.w	8001636 <SSD1322_DrawUnicode+0x79e>
 8001198:	e298      	b.n	80016cc <SSD1322_DrawUnicode+0x834>
 800119a:	2bc1      	cmp	r3, #193	; 0xc1
 800119c:	f000 825a 	beq.w	8001654 <SSD1322_DrawUnicode+0x7bc>
 80011a0:	2bc1      	cmp	r3, #193	; 0xc1
 80011a2:	f0c0 8254 	bcc.w	800164e <SSD1322_DrawUnicode+0x7b6>
 80011a6:	2bc2      	cmp	r3, #194	; 0xc2
 80011a8:	f000 8257 	beq.w	800165a <SSD1322_DrawUnicode+0x7c2>
 80011ac:	2bc3      	cmp	r3, #195	; 0xc3
 80011ae:	f000 8257 	beq.w	8001660 <SSD1322_DrawUnicode+0x7c8>
 80011b2:	e28b      	b.n	80016cc <SSD1322_DrawUnicode+0x834>
 80011b4:	f242 0214 	movw	r2, #8212	; 0x2014
 80011b8:	4293      	cmp	r3, r2
 80011ba:	f000 826c 	beq.w	8001696 <SSD1322_DrawUnicode+0x7fe>
 80011be:	f242 0214 	movw	r2, #8212	; 0x2014
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d815      	bhi.n	80011f2 <SSD1322_DrawUnicode+0x35a>
 80011c6:	2bc8      	cmp	r3, #200	; 0xc8
 80011c8:	f000 8259 	beq.w	800167e <SSD1322_DrawUnicode+0x7e6>
 80011cc:	2bc8      	cmp	r3, #200	; 0xc8
 80011ce:	d806      	bhi.n	80011de <SSD1322_DrawUnicode+0x346>
 80011d0:	2bc6      	cmp	r3, #198	; 0xc6
 80011d2:	f000 824e 	beq.w	8001672 <SSD1322_DrawUnicode+0x7da>
 80011d6:	2bc6      	cmp	r3, #198	; 0xc6
 80011d8:	f200 824e 	bhi.w	8001678 <SSD1322_DrawUnicode+0x7e0>
 80011dc:	e246      	b.n	800166c <SSD1322_DrawUnicode+0x7d4>
 80011de:	2bd7      	cmp	r3, #215	; 0xd7
 80011e0:	f000 8253 	beq.w	800168a <SSD1322_DrawUnicode+0x7f2>
 80011e4:	2bf7      	cmp	r3, #247	; 0xf7
 80011e6:	f000 8253 	beq.w	8001690 <SSD1322_DrawUnicode+0x7f8>
 80011ea:	2bc9      	cmp	r3, #201	; 0xc9
 80011ec:	f000 824a 	beq.w	8001684 <SSD1322_DrawUnicode+0x7ec>
 80011f0:	e26c      	b.n	80016cc <SSD1322_DrawUnicode+0x834>
 80011f2:	f242 0222 	movw	r2, #8226	; 0x2022
 80011f6:	4293      	cmp	r3, r2
 80011f8:	f000 8259 	beq.w	80016ae <SSD1322_DrawUnicode+0x816>
 80011fc:	f242 0222 	movw	r2, #8226	; 0x2022
 8001200:	4293      	cmp	r3, r2
 8001202:	d80f      	bhi.n	8001224 <SSD1322_DrawUnicode+0x38c>
 8001204:	f242 021b 	movw	r2, #8219	; 0x201b
 8001208:	4293      	cmp	r3, r2
 800120a:	f000 824a 	beq.w	80016a2 <SSD1322_DrawUnicode+0x80a>
 800120e:	f242 021e 	movw	r2, #8222	; 0x201e
 8001212:	4293      	cmp	r3, r2
 8001214:	f000 8248 	beq.w	80016a8 <SSD1322_DrawUnicode+0x810>
 8001218:	f242 021a 	movw	r2, #8218	; 0x201a
 800121c:	4293      	cmp	r3, r2
 800121e:	f000 823d 	beq.w	800169c <SSD1322_DrawUnicode+0x804>
 8001222:	e253      	b.n	80016cc <SSD1322_DrawUnicode+0x834>
 8001224:	f242 023a 	movw	r2, #8250	; 0x203a
 8001228:	4293      	cmp	r3, r2
 800122a:	f000 8246 	beq.w	80016ba <SSD1322_DrawUnicode+0x822>
 800122e:	f242 023a 	movw	r2, #8250	; 0x203a
 8001232:	4293      	cmp	r3, r2
 8001234:	d805      	bhi.n	8001242 <SSD1322_DrawUnicode+0x3aa>
 8001236:	f242 0239 	movw	r2, #8249	; 0x2039
 800123a:	4293      	cmp	r3, r2
 800123c:	f000 823a 	beq.w	80016b4 <SSD1322_DrawUnicode+0x81c>
 8001240:	e244      	b.n	80016cc <SSD1322_DrawUnicode+0x834>
 8001242:	f242 02ac 	movw	r2, #8364	; 0x20ac
 8001246:	4293      	cmp	r3, r2
 8001248:	f000 823a 	beq.w	80016c0 <SSD1322_DrawUnicode+0x828>
 800124c:	f242 1222 	movw	r2, #8482	; 0x2122
 8001250:	4293      	cmp	r3, r2
 8001252:	f000 8238 	beq.w	80016c6 <SSD1322_DrawUnicode+0x82e>
 8001256:	e239      	b.n	80016cc <SSD1322_DrawUnicode+0x834>
  {
    case   32: { pCharacter = FALCON_DED_FONT_CHAR_32;   } break;
 8001258:	4b7d      	ldr	r3, [pc, #500]	; (8001450 <SSD1322_DrawUnicode+0x5b8>)
 800125a:	61bb      	str	r3, [r7, #24]
 800125c:	e238      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   33: { pCharacter = FALCON_DED_FONT_CHAR_33;   } break;
 800125e:	4b7d      	ldr	r3, [pc, #500]	; (8001454 <SSD1322_DrawUnicode+0x5bc>)
 8001260:	61bb      	str	r3, [r7, #24]
 8001262:	e235      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   34: { pCharacter = FALCON_DED_FONT_CHAR_34;   } break;
 8001264:	4b7c      	ldr	r3, [pc, #496]	; (8001458 <SSD1322_DrawUnicode+0x5c0>)
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	e232      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   35: { pCharacter = FALCON_DED_FONT_CHAR_35;   } break;
 800126a:	4b7c      	ldr	r3, [pc, #496]	; (800145c <SSD1322_DrawUnicode+0x5c4>)
 800126c:	61bb      	str	r3, [r7, #24]
 800126e:	e22f      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   36: { pCharacter = FALCON_DED_FONT_CHAR_36;   } break;
 8001270:	4b7b      	ldr	r3, [pc, #492]	; (8001460 <SSD1322_DrawUnicode+0x5c8>)
 8001272:	61bb      	str	r3, [r7, #24]
 8001274:	e22c      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   37: { pCharacter = FALCON_DED_FONT_CHAR_37;   } break;
 8001276:	4b7b      	ldr	r3, [pc, #492]	; (8001464 <SSD1322_DrawUnicode+0x5cc>)
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	e229      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   38: { pCharacter = FALCON_DED_FONT_CHAR_38;   } break;
 800127c:	4b7a      	ldr	r3, [pc, #488]	; (8001468 <SSD1322_DrawUnicode+0x5d0>)
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	e226      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   39: { pCharacter = FALCON_DED_FONT_CHAR_39;   } break;
 8001282:	4b7a      	ldr	r3, [pc, #488]	; (800146c <SSD1322_DrawUnicode+0x5d4>)
 8001284:	61bb      	str	r3, [r7, #24]
 8001286:	e223      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   40: { pCharacter = FALCON_DED_FONT_CHAR_40;   } break;
 8001288:	4b79      	ldr	r3, [pc, #484]	; (8001470 <SSD1322_DrawUnicode+0x5d8>)
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	e220      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   41: { pCharacter = FALCON_DED_FONT_CHAR_41;   } break;
 800128e:	4b79      	ldr	r3, [pc, #484]	; (8001474 <SSD1322_DrawUnicode+0x5dc>)
 8001290:	61bb      	str	r3, [r7, #24]
 8001292:	e21d      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   42: { pCharacter = FALCON_DED_FONT_CHAR_42;   } break;
 8001294:	4b78      	ldr	r3, [pc, #480]	; (8001478 <SSD1322_DrawUnicode+0x5e0>)
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	e21a      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   43: { pCharacter = FALCON_DED_FONT_CHAR_43;   } break;
 800129a:	4b78      	ldr	r3, [pc, #480]	; (800147c <SSD1322_DrawUnicode+0x5e4>)
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	e217      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   44: { pCharacter = FALCON_DED_FONT_CHAR_44;   } break;
 80012a0:	4b77      	ldr	r3, [pc, #476]	; (8001480 <SSD1322_DrawUnicode+0x5e8>)
 80012a2:	61bb      	str	r3, [r7, #24]
 80012a4:	e214      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   45: { pCharacter = FALCON_DED_FONT_CHAR_45;   } break;
 80012a6:	4b77      	ldr	r3, [pc, #476]	; (8001484 <SSD1322_DrawUnicode+0x5ec>)
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	e211      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   46: { pCharacter = FALCON_DED_FONT_CHAR_46;   } break;
 80012ac:	4b76      	ldr	r3, [pc, #472]	; (8001488 <SSD1322_DrawUnicode+0x5f0>)
 80012ae:	61bb      	str	r3, [r7, #24]
 80012b0:	e20e      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   47: { pCharacter = FALCON_DED_FONT_CHAR_47;   } break;
 80012b2:	4b76      	ldr	r3, [pc, #472]	; (800148c <SSD1322_DrawUnicode+0x5f4>)
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	e20b      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   48: { pCharacter = FALCON_DED_FONT_CHAR_48;   } break;
 80012b8:	4b75      	ldr	r3, [pc, #468]	; (8001490 <SSD1322_DrawUnicode+0x5f8>)
 80012ba:	61bb      	str	r3, [r7, #24]
 80012bc:	e208      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   49: { pCharacter = FALCON_DED_FONT_CHAR_49;   } break;
 80012be:	4b75      	ldr	r3, [pc, #468]	; (8001494 <SSD1322_DrawUnicode+0x5fc>)
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	e205      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   50: { pCharacter = FALCON_DED_FONT_CHAR_50;   } break;
 80012c4:	4b74      	ldr	r3, [pc, #464]	; (8001498 <SSD1322_DrawUnicode+0x600>)
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	e202      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   51: { pCharacter = FALCON_DED_FONT_CHAR_51;   } break;
 80012ca:	4b74      	ldr	r3, [pc, #464]	; (800149c <SSD1322_DrawUnicode+0x604>)
 80012cc:	61bb      	str	r3, [r7, #24]
 80012ce:	e1ff      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   52: { pCharacter = FALCON_DED_FONT_CHAR_52;   } break;
 80012d0:	4b73      	ldr	r3, [pc, #460]	; (80014a0 <SSD1322_DrawUnicode+0x608>)
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	e1fc      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   53: { pCharacter = FALCON_DED_FONT_CHAR_53;   } break;
 80012d6:	4b73      	ldr	r3, [pc, #460]	; (80014a4 <SSD1322_DrawUnicode+0x60c>)
 80012d8:	61bb      	str	r3, [r7, #24]
 80012da:	e1f9      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   54: { pCharacter = FALCON_DED_FONT_CHAR_54;   } break;
 80012dc:	4b72      	ldr	r3, [pc, #456]	; (80014a8 <SSD1322_DrawUnicode+0x610>)
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	e1f6      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   55: { pCharacter = FALCON_DED_FONT_CHAR_55;   } break;
 80012e2:	4b72      	ldr	r3, [pc, #456]	; (80014ac <SSD1322_DrawUnicode+0x614>)
 80012e4:	61bb      	str	r3, [r7, #24]
 80012e6:	e1f3      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   56: { pCharacter = FALCON_DED_FONT_CHAR_56;   } break;
 80012e8:	4b71      	ldr	r3, [pc, #452]	; (80014b0 <SSD1322_DrawUnicode+0x618>)
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	e1f0      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   57: { pCharacter = FALCON_DED_FONT_CHAR_57;   } break;
 80012ee:	4b71      	ldr	r3, [pc, #452]	; (80014b4 <SSD1322_DrawUnicode+0x61c>)
 80012f0:	61bb      	str	r3, [r7, #24]
 80012f2:	e1ed      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   58: { pCharacter = FALCON_DED_FONT_CHAR_58;   } break;
 80012f4:	4b70      	ldr	r3, [pc, #448]	; (80014b8 <SSD1322_DrawUnicode+0x620>)
 80012f6:	61bb      	str	r3, [r7, #24]
 80012f8:	e1ea      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   59: { pCharacter = FALCON_DED_FONT_CHAR_59;   } break;
 80012fa:	4b70      	ldr	r3, [pc, #448]	; (80014bc <SSD1322_DrawUnicode+0x624>)
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	e1e7      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   60: { pCharacter = FALCON_DED_FONT_CHAR_60;   } break;
 8001300:	4b6f      	ldr	r3, [pc, #444]	; (80014c0 <SSD1322_DrawUnicode+0x628>)
 8001302:	61bb      	str	r3, [r7, #24]
 8001304:	e1e4      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   61: { pCharacter = FALCON_DED_FONT_CHAR_61;   } break;
 8001306:	4b6f      	ldr	r3, [pc, #444]	; (80014c4 <SSD1322_DrawUnicode+0x62c>)
 8001308:	61bb      	str	r3, [r7, #24]
 800130a:	e1e1      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   62: { pCharacter = FALCON_DED_FONT_CHAR_62;   } break;
 800130c:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <SSD1322_DrawUnicode+0x630>)
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	e1de      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   63: { pCharacter = FALCON_DED_FONT_CHAR_63;   } break;
 8001312:	4b6e      	ldr	r3, [pc, #440]	; (80014cc <SSD1322_DrawUnicode+0x634>)
 8001314:	61bb      	str	r3, [r7, #24]
 8001316:	e1db      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   64: { pCharacter = FALCON_DED_FONT_CHAR_64;   } break;
 8001318:	4b6d      	ldr	r3, [pc, #436]	; (80014d0 <SSD1322_DrawUnicode+0x638>)
 800131a:	61bb      	str	r3, [r7, #24]
 800131c:	e1d8      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   65: { pCharacter = FALCON_DED_FONT_CHAR_65;   } break;
 800131e:	4b6d      	ldr	r3, [pc, #436]	; (80014d4 <SSD1322_DrawUnicode+0x63c>)
 8001320:	61bb      	str	r3, [r7, #24]
 8001322:	e1d5      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   66: { pCharacter = FALCON_DED_FONT_CHAR_66;   } break;
 8001324:	4b6c      	ldr	r3, [pc, #432]	; (80014d8 <SSD1322_DrawUnicode+0x640>)
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	e1d2      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   67: { pCharacter = FALCON_DED_FONT_CHAR_67;   } break;
 800132a:	4b6c      	ldr	r3, [pc, #432]	; (80014dc <SSD1322_DrawUnicode+0x644>)
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	e1cf      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   68: { pCharacter = FALCON_DED_FONT_CHAR_68;   } break;
 8001330:	4b6b      	ldr	r3, [pc, #428]	; (80014e0 <SSD1322_DrawUnicode+0x648>)
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	e1cc      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   69: { pCharacter = FALCON_DED_FONT_CHAR_69;   } break;
 8001336:	4b6b      	ldr	r3, [pc, #428]	; (80014e4 <SSD1322_DrawUnicode+0x64c>)
 8001338:	61bb      	str	r3, [r7, #24]
 800133a:	e1c9      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   70: { pCharacter = FALCON_DED_FONT_CHAR_70;   } break;
 800133c:	4b6a      	ldr	r3, [pc, #424]	; (80014e8 <SSD1322_DrawUnicode+0x650>)
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	e1c6      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   71: { pCharacter = FALCON_DED_FONT_CHAR_71;   } break;
 8001342:	4b6a      	ldr	r3, [pc, #424]	; (80014ec <SSD1322_DrawUnicode+0x654>)
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	e1c3      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   72: { pCharacter = FALCON_DED_FONT_CHAR_72;   } break;
 8001348:	4b69      	ldr	r3, [pc, #420]	; (80014f0 <SSD1322_DrawUnicode+0x658>)
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	e1c0      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   73: { pCharacter = FALCON_DED_FONT_CHAR_73;   } break;
 800134e:	4b69      	ldr	r3, [pc, #420]	; (80014f4 <SSD1322_DrawUnicode+0x65c>)
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	e1bd      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   74: { pCharacter = FALCON_DED_FONT_CHAR_74;   } break;
 8001354:	4b68      	ldr	r3, [pc, #416]	; (80014f8 <SSD1322_DrawUnicode+0x660>)
 8001356:	61bb      	str	r3, [r7, #24]
 8001358:	e1ba      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   75: { pCharacter = FALCON_DED_FONT_CHAR_75;   } break;
 800135a:	4b68      	ldr	r3, [pc, #416]	; (80014fc <SSD1322_DrawUnicode+0x664>)
 800135c:	61bb      	str	r3, [r7, #24]
 800135e:	e1b7      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   76: { pCharacter = FALCON_DED_FONT_CHAR_76;   } break;
 8001360:	4b67      	ldr	r3, [pc, #412]	; (8001500 <SSD1322_DrawUnicode+0x668>)
 8001362:	61bb      	str	r3, [r7, #24]
 8001364:	e1b4      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   77: { pCharacter = FALCON_DED_FONT_CHAR_77;   } break;
 8001366:	4b67      	ldr	r3, [pc, #412]	; (8001504 <SSD1322_DrawUnicode+0x66c>)
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	e1b1      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   78: { pCharacter = FALCON_DED_FONT_CHAR_78;   } break;
 800136c:	4b66      	ldr	r3, [pc, #408]	; (8001508 <SSD1322_DrawUnicode+0x670>)
 800136e:	61bb      	str	r3, [r7, #24]
 8001370:	e1ae      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   79: { pCharacter = FALCON_DED_FONT_CHAR_79;   } break;
 8001372:	4b66      	ldr	r3, [pc, #408]	; (800150c <SSD1322_DrawUnicode+0x674>)
 8001374:	61bb      	str	r3, [r7, #24]
 8001376:	e1ab      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   80: { pCharacter = FALCON_DED_FONT_CHAR_80;   } break;
 8001378:	4b65      	ldr	r3, [pc, #404]	; (8001510 <SSD1322_DrawUnicode+0x678>)
 800137a:	61bb      	str	r3, [r7, #24]
 800137c:	e1a8      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   81: { pCharacter = FALCON_DED_FONT_CHAR_81;   } break;
 800137e:	4b65      	ldr	r3, [pc, #404]	; (8001514 <SSD1322_DrawUnicode+0x67c>)
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	e1a5      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   82: { pCharacter = FALCON_DED_FONT_CHAR_82;   } break;
 8001384:	4b64      	ldr	r3, [pc, #400]	; (8001518 <SSD1322_DrawUnicode+0x680>)
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	e1a2      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   83: { pCharacter = FALCON_DED_FONT_CHAR_83;   } break;
 800138a:	4b64      	ldr	r3, [pc, #400]	; (800151c <SSD1322_DrawUnicode+0x684>)
 800138c:	61bb      	str	r3, [r7, #24]
 800138e:	e19f      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   84: { pCharacter = FALCON_DED_FONT_CHAR_84;   } break;
 8001390:	4b63      	ldr	r3, [pc, #396]	; (8001520 <SSD1322_DrawUnicode+0x688>)
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	e19c      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   85: { pCharacter = FALCON_DED_FONT_CHAR_85;   } break;
 8001396:	4b63      	ldr	r3, [pc, #396]	; (8001524 <SSD1322_DrawUnicode+0x68c>)
 8001398:	61bb      	str	r3, [r7, #24]
 800139a:	e199      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   86: { pCharacter = FALCON_DED_FONT_CHAR_86;   } break;
 800139c:	4b62      	ldr	r3, [pc, #392]	; (8001528 <SSD1322_DrawUnicode+0x690>)
 800139e:	61bb      	str	r3, [r7, #24]
 80013a0:	e196      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   87: { pCharacter = FALCON_DED_FONT_CHAR_87;   } break;
 80013a2:	4b62      	ldr	r3, [pc, #392]	; (800152c <SSD1322_DrawUnicode+0x694>)
 80013a4:	61bb      	str	r3, [r7, #24]
 80013a6:	e193      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   88: { pCharacter = FALCON_DED_FONT_CHAR_88;   } break;
 80013a8:	4b61      	ldr	r3, [pc, #388]	; (8001530 <SSD1322_DrawUnicode+0x698>)
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	e190      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   89: { pCharacter = FALCON_DED_FONT_CHAR_89;   } break;
 80013ae:	4b61      	ldr	r3, [pc, #388]	; (8001534 <SSD1322_DrawUnicode+0x69c>)
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	e18d      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   90: { pCharacter = FALCON_DED_FONT_CHAR_90;   } break;
 80013b4:	4b60      	ldr	r3, [pc, #384]	; (8001538 <SSD1322_DrawUnicode+0x6a0>)
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	e18a      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   91: { pCharacter = FALCON_DED_FONT_CHAR_91;   } break;
 80013ba:	4b60      	ldr	r3, [pc, #384]	; (800153c <SSD1322_DrawUnicode+0x6a4>)
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	e187      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   92: { pCharacter = FALCON_DED_FONT_CHAR_92;   } break;
 80013c0:	4b5f      	ldr	r3, [pc, #380]	; (8001540 <SSD1322_DrawUnicode+0x6a8>)
 80013c2:	61bb      	str	r3, [r7, #24]
 80013c4:	e184      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   93: { pCharacter = FALCON_DED_FONT_CHAR_93;   } break;
 80013c6:	4b5f      	ldr	r3, [pc, #380]	; (8001544 <SSD1322_DrawUnicode+0x6ac>)
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	e181      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   94: { pCharacter = FALCON_DED_FONT_CHAR_94;   } break;
 80013cc:	4b5e      	ldr	r3, [pc, #376]	; (8001548 <SSD1322_DrawUnicode+0x6b0>)
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	e17e      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   95: { pCharacter = FALCON_DED_FONT_CHAR_95;   } break;
 80013d2:	4b5e      	ldr	r3, [pc, #376]	; (800154c <SSD1322_DrawUnicode+0x6b4>)
 80013d4:	61bb      	str	r3, [r7, #24]
 80013d6:	e17b      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   97: { pCharacter = FALCON_DED_FONT_CHAR_97;   } break;
 80013d8:	4b5d      	ldr	r3, [pc, #372]	; (8001550 <SSD1322_DrawUnicode+0x6b8>)
 80013da:	61bb      	str	r3, [r7, #24]
 80013dc:	e178      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   98: { pCharacter = FALCON_DED_FONT_CHAR_98;   } break;
 80013de:	4b5d      	ldr	r3, [pc, #372]	; (8001554 <SSD1322_DrawUnicode+0x6bc>)
 80013e0:	61bb      	str	r3, [r7, #24]
 80013e2:	e175      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case   99: { pCharacter = FALCON_DED_FONT_CHAR_99;   } break;
 80013e4:	4b5c      	ldr	r3, [pc, #368]	; (8001558 <SSD1322_DrawUnicode+0x6c0>)
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	e172      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  100: { pCharacter = FALCON_DED_FONT_CHAR_100;  } break;
 80013ea:	4b5c      	ldr	r3, [pc, #368]	; (800155c <SSD1322_DrawUnicode+0x6c4>)
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	e16f      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  101: { pCharacter = FALCON_DED_FONT_CHAR_101;  } break;
 80013f0:	4b5b      	ldr	r3, [pc, #364]	; (8001560 <SSD1322_DrawUnicode+0x6c8>)
 80013f2:	61bb      	str	r3, [r7, #24]
 80013f4:	e16c      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  102: { pCharacter = FALCON_DED_FONT_CHAR_102;  } break;
 80013f6:	4b5b      	ldr	r3, [pc, #364]	; (8001564 <SSD1322_DrawUnicode+0x6cc>)
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	e169      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  103: { pCharacter = FALCON_DED_FONT_CHAR_103;  } break;
 80013fc:	4b5a      	ldr	r3, [pc, #360]	; (8001568 <SSD1322_DrawUnicode+0x6d0>)
 80013fe:	61bb      	str	r3, [r7, #24]
 8001400:	e166      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  104: { pCharacter = FALCON_DED_FONT_CHAR_104;  } break;
 8001402:	4b5a      	ldr	r3, [pc, #360]	; (800156c <SSD1322_DrawUnicode+0x6d4>)
 8001404:	61bb      	str	r3, [r7, #24]
 8001406:	e163      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  105: { pCharacter = FALCON_DED_FONT_CHAR_105;  } break;
 8001408:	4b59      	ldr	r3, [pc, #356]	; (8001570 <SSD1322_DrawUnicode+0x6d8>)
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	e160      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  106: { pCharacter = FALCON_DED_FONT_CHAR_106;  } break;
 800140e:	4b59      	ldr	r3, [pc, #356]	; (8001574 <SSD1322_DrawUnicode+0x6dc>)
 8001410:	61bb      	str	r3, [r7, #24]
 8001412:	e15d      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  107: { pCharacter = FALCON_DED_FONT_CHAR_107;  } break;
 8001414:	4b58      	ldr	r3, [pc, #352]	; (8001578 <SSD1322_DrawUnicode+0x6e0>)
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	e15a      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  108: { pCharacter = FALCON_DED_FONT_CHAR_108;  } break;
 800141a:	4b58      	ldr	r3, [pc, #352]	; (800157c <SSD1322_DrawUnicode+0x6e4>)
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	e157      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  109: { pCharacter = FALCON_DED_FONT_CHAR_109;  } break;
 8001420:	4b57      	ldr	r3, [pc, #348]	; (8001580 <SSD1322_DrawUnicode+0x6e8>)
 8001422:	61bb      	str	r3, [r7, #24]
 8001424:	e154      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  110: { pCharacter = FALCON_DED_FONT_CHAR_110;  } break;
 8001426:	4b57      	ldr	r3, [pc, #348]	; (8001584 <SSD1322_DrawUnicode+0x6ec>)
 8001428:	61bb      	str	r3, [r7, #24]
 800142a:	e151      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  111: { pCharacter = FALCON_DED_FONT_CHAR_111;  } break;
 800142c:	4b56      	ldr	r3, [pc, #344]	; (8001588 <SSD1322_DrawUnicode+0x6f0>)
 800142e:	61bb      	str	r3, [r7, #24]
 8001430:	e14e      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  112: { pCharacter = FALCON_DED_FONT_CHAR_112;  } break;
 8001432:	4b56      	ldr	r3, [pc, #344]	; (800158c <SSD1322_DrawUnicode+0x6f4>)
 8001434:	61bb      	str	r3, [r7, #24]
 8001436:	e14b      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  113: { pCharacter = FALCON_DED_FONT_CHAR_113;  } break;
 8001438:	4b55      	ldr	r3, [pc, #340]	; (8001590 <SSD1322_DrawUnicode+0x6f8>)
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	e148      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  114: { pCharacter = FALCON_DED_FONT_CHAR_114;  } break;
 800143e:	4b55      	ldr	r3, [pc, #340]	; (8001594 <SSD1322_DrawUnicode+0x6fc>)
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	e145      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  115: { pCharacter = FALCON_DED_FONT_CHAR_115;  } break;
 8001444:	4b54      	ldr	r3, [pc, #336]	; (8001598 <SSD1322_DrawUnicode+0x700>)
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	e142      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  116: { pCharacter = FALCON_DED_FONT_CHAR_116;  } break;
 800144a:	4b54      	ldr	r3, [pc, #336]	; (800159c <SSD1322_DrawUnicode+0x704>)
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	e13f      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
 8001450:	080041f0 	.word	0x080041f0
 8001454:	08004208 	.word	0x08004208
 8001458:	08004220 	.word	0x08004220
 800145c:	08004238 	.word	0x08004238
 8001460:	08004250 	.word	0x08004250
 8001464:	08004268 	.word	0x08004268
 8001468:	08004280 	.word	0x08004280
 800146c:	08004298 	.word	0x08004298
 8001470:	080042b0 	.word	0x080042b0
 8001474:	080042c8 	.word	0x080042c8
 8001478:	080042e0 	.word	0x080042e0
 800147c:	080042f8 	.word	0x080042f8
 8001480:	08004310 	.word	0x08004310
 8001484:	08004328 	.word	0x08004328
 8001488:	08004340 	.word	0x08004340
 800148c:	08004358 	.word	0x08004358
 8001490:	08004370 	.word	0x08004370
 8001494:	08004388 	.word	0x08004388
 8001498:	080043a0 	.word	0x080043a0
 800149c:	080043b8 	.word	0x080043b8
 80014a0:	080043d0 	.word	0x080043d0
 80014a4:	080043e8 	.word	0x080043e8
 80014a8:	08004400 	.word	0x08004400
 80014ac:	08004418 	.word	0x08004418
 80014b0:	08004430 	.word	0x08004430
 80014b4:	08004448 	.word	0x08004448
 80014b8:	08004460 	.word	0x08004460
 80014bc:	08004478 	.word	0x08004478
 80014c0:	08004490 	.word	0x08004490
 80014c4:	080044a8 	.word	0x080044a8
 80014c8:	080044c0 	.word	0x080044c0
 80014cc:	080044d8 	.word	0x080044d8
 80014d0:	080044f0 	.word	0x080044f0
 80014d4:	08004508 	.word	0x08004508
 80014d8:	08004520 	.word	0x08004520
 80014dc:	08004538 	.word	0x08004538
 80014e0:	08004550 	.word	0x08004550
 80014e4:	08004568 	.word	0x08004568
 80014e8:	08004580 	.word	0x08004580
 80014ec:	08004598 	.word	0x08004598
 80014f0:	080045b0 	.word	0x080045b0
 80014f4:	080045c8 	.word	0x080045c8
 80014f8:	080045e0 	.word	0x080045e0
 80014fc:	080045f8 	.word	0x080045f8
 8001500:	08004610 	.word	0x08004610
 8001504:	08004628 	.word	0x08004628
 8001508:	08004640 	.word	0x08004640
 800150c:	08004658 	.word	0x08004658
 8001510:	08004670 	.word	0x08004670
 8001514:	08004688 	.word	0x08004688
 8001518:	080046a0 	.word	0x080046a0
 800151c:	080046b8 	.word	0x080046b8
 8001520:	080046d0 	.word	0x080046d0
 8001524:	080046e8 	.word	0x080046e8
 8001528:	08004700 	.word	0x08004700
 800152c:	08004718 	.word	0x08004718
 8001530:	08004730 	.word	0x08004730
 8001534:	08004748 	.word	0x08004748
 8001538:	08004760 	.word	0x08004760
 800153c:	08004778 	.word	0x08004778
 8001540:	08004790 	.word	0x08004790
 8001544:	080047a8 	.word	0x080047a8
 8001548:	080047c0 	.word	0x080047c0
 800154c:	080047d8 	.word	0x080047d8
 8001550:	080047f0 	.word	0x080047f0
 8001554:	08004808 	.word	0x08004808
 8001558:	08004820 	.word	0x08004820
 800155c:	08004838 	.word	0x08004838
 8001560:	08004850 	.word	0x08004850
 8001564:	08004868 	.word	0x08004868
 8001568:	08004880 	.word	0x08004880
 800156c:	08004898 	.word	0x08004898
 8001570:	080048b0 	.word	0x080048b0
 8001574:	080048c8 	.word	0x080048c8
 8001578:	080048e0 	.word	0x080048e0
 800157c:	080048f8 	.word	0x080048f8
 8001580:	08004910 	.word	0x08004910
 8001584:	08004928 	.word	0x08004928
 8001588:	08004940 	.word	0x08004940
 800158c:	08004958 	.word	0x08004958
 8001590:	08004970 	.word	0x08004970
 8001594:	08004988 	.word	0x08004988
 8001598:	080049a0 	.word	0x080049a0
 800159c:	080049b8 	.word	0x080049b8
    case  117: { pCharacter = FALCON_DED_FONT_CHAR_117;  } break;
 80015a0:	4b82      	ldr	r3, [pc, #520]	; (80017ac <SSD1322_DrawUnicode+0x914>)
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	e094      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  118: { pCharacter = FALCON_DED_FONT_CHAR_118;  } break;
 80015a6:	4b82      	ldr	r3, [pc, #520]	; (80017b0 <SSD1322_DrawUnicode+0x918>)
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	e091      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  119: { pCharacter = FALCON_DED_FONT_CHAR_119;  } break;
 80015ac:	4b81      	ldr	r3, [pc, #516]	; (80017b4 <SSD1322_DrawUnicode+0x91c>)
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	e08e      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  120: { pCharacter = FALCON_DED_FONT_CHAR_120;  } break;
 80015b2:	4b81      	ldr	r3, [pc, #516]	; (80017b8 <SSD1322_DrawUnicode+0x920>)
 80015b4:	61bb      	str	r3, [r7, #24]
 80015b6:	e08b      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  121: { pCharacter = FALCON_DED_FONT_CHAR_121;  } break;
 80015b8:	4b80      	ldr	r3, [pc, #512]	; (80017bc <SSD1322_DrawUnicode+0x924>)
 80015ba:	61bb      	str	r3, [r7, #24]
 80015bc:	e088      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  122: { pCharacter = FALCON_DED_FONT_CHAR_122;  } break;
 80015be:	4b80      	ldr	r3, [pc, #512]	; (80017c0 <SSD1322_DrawUnicode+0x928>)
 80015c0:	61bb      	str	r3, [r7, #24]
 80015c2:	e085      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  123: { pCharacter = FALCON_DED_FONT_CHAR_123;  } break;
 80015c4:	4b7f      	ldr	r3, [pc, #508]	; (80017c4 <SSD1322_DrawUnicode+0x92c>)
 80015c6:	61bb      	str	r3, [r7, #24]
 80015c8:	e082      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  124: { pCharacter = FALCON_DED_FONT_CHAR_124;  } break;
 80015ca:	4b7f      	ldr	r3, [pc, #508]	; (80017c8 <SSD1322_DrawUnicode+0x930>)
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	e07f      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  125: { pCharacter = FALCON_DED_FONT_CHAR_125;  } break;
 80015d0:	4b7e      	ldr	r3, [pc, #504]	; (80017cc <SSD1322_DrawUnicode+0x934>)
 80015d2:	61bb      	str	r3, [r7, #24]
 80015d4:	e07c      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  160: { pCharacter = FALCON_DED_FONT_CHAR_160;  } break;
 80015d6:	4b7e      	ldr	r3, [pc, #504]	; (80017d0 <SSD1322_DrawUnicode+0x938>)
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	e079      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  161: { pCharacter = FALCON_DED_FONT_CHAR_161;  } break;
 80015dc:	4b7d      	ldr	r3, [pc, #500]	; (80017d4 <SSD1322_DrawUnicode+0x93c>)
 80015de:	61bb      	str	r3, [r7, #24]
 80015e0:	e076      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  162: { pCharacter = FALCON_DED_FONT_CHAR_162;  } break;
 80015e2:	4b7d      	ldr	r3, [pc, #500]	; (80017d8 <SSD1322_DrawUnicode+0x940>)
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	e073      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  163: { pCharacter = FALCON_DED_FONT_CHAR_163;  } break;
 80015e8:	4b7c      	ldr	r3, [pc, #496]	; (80017dc <SSD1322_DrawUnicode+0x944>)
 80015ea:	61bb      	str	r3, [r7, #24]
 80015ec:	e070      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  164: { pCharacter = FALCON_DED_FONT_CHAR_164;  } break;
 80015ee:	4b7c      	ldr	r3, [pc, #496]	; (80017e0 <SSD1322_DrawUnicode+0x948>)
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	e06d      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  166: { pCharacter = FALCON_DED_FONT_CHAR_166;  } break;
 80015f4:	4b7b      	ldr	r3, [pc, #492]	; (80017e4 <SSD1322_DrawUnicode+0x94c>)
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	e06a      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  168: { pCharacter = FALCON_DED_FONT_CHAR_168;  } break;
 80015fa:	4b7b      	ldr	r3, [pc, #492]	; (80017e8 <SSD1322_DrawUnicode+0x950>)
 80015fc:	61bb      	str	r3, [r7, #24]
 80015fe:	e067      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  169: { pCharacter = FALCON_DED_FONT_CHAR_169;  } break;
 8001600:	4b7a      	ldr	r3, [pc, #488]	; (80017ec <SSD1322_DrawUnicode+0x954>)
 8001602:	61bb      	str	r3, [r7, #24]
 8001604:	e064      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  170: { pCharacter = FALCON_DED_FONT_CHAR_170;  } break;
 8001606:	4b7a      	ldr	r3, [pc, #488]	; (80017f0 <SSD1322_DrawUnicode+0x958>)
 8001608:	61bb      	str	r3, [r7, #24]
 800160a:	e061      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  171: { pCharacter = FALCON_DED_FONT_CHAR_171;  } break;
 800160c:	4b79      	ldr	r3, [pc, #484]	; (80017f4 <SSD1322_DrawUnicode+0x95c>)
 800160e:	61bb      	str	r3, [r7, #24]
 8001610:	e05e      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  172: { pCharacter = FALCON_DED_FONT_CHAR_172;  } break;
 8001612:	4b79      	ldr	r3, [pc, #484]	; (80017f8 <SSD1322_DrawUnicode+0x960>)
 8001614:	61bb      	str	r3, [r7, #24]
 8001616:	e05b      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  174: { pCharacter = FALCON_DED_FONT_CHAR_174;  } break;
 8001618:	4b78      	ldr	r3, [pc, #480]	; (80017fc <SSD1322_DrawUnicode+0x964>)
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	e058      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  175: { pCharacter = FALCON_DED_FONT_CHAR_175;  } break;
 800161e:	4b78      	ldr	r3, [pc, #480]	; (8001800 <SSD1322_DrawUnicode+0x968>)
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	e055      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  176: { pCharacter = FALCON_DED_FONT_CHAR_176;  } break;
 8001624:	4b77      	ldr	r3, [pc, #476]	; (8001804 <SSD1322_DrawUnicode+0x96c>)
 8001626:	61bb      	str	r3, [r7, #24]
 8001628:	e052      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  177: { pCharacter = FALCON_DED_FONT_CHAR_177;  } break;
 800162a:	4b77      	ldr	r3, [pc, #476]	; (8001808 <SSD1322_DrawUnicode+0x970>)
 800162c:	61bb      	str	r3, [r7, #24]
 800162e:	e04f      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  182: { pCharacter = FALCON_DED_FONT_CHAR_182;  } break;
 8001630:	4b76      	ldr	r3, [pc, #472]	; (800180c <SSD1322_DrawUnicode+0x974>)
 8001632:	61bb      	str	r3, [r7, #24]
 8001634:	e04c      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  185: { pCharacter = FALCON_DED_FONT_CHAR_185;  } break;
 8001636:	4b76      	ldr	r3, [pc, #472]	; (8001810 <SSD1322_DrawUnicode+0x978>)
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	e049      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  186: { pCharacter = FALCON_DED_FONT_CHAR_186;  } break;
 800163c:	4b75      	ldr	r3, [pc, #468]	; (8001814 <SSD1322_DrawUnicode+0x97c>)
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	e046      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  187: { pCharacter = FALCON_DED_FONT_CHAR_187;  } break;
 8001642:	4b75      	ldr	r3, [pc, #468]	; (8001818 <SSD1322_DrawUnicode+0x980>)
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	e043      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  191: { pCharacter = FALCON_DED_FONT_CHAR_191;  } break;
 8001648:	4b74      	ldr	r3, [pc, #464]	; (800181c <SSD1322_DrawUnicode+0x984>)
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	e040      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  192: { pCharacter = FALCON_DED_FONT_CHAR_192;  } break;
 800164e:	4b74      	ldr	r3, [pc, #464]	; (8001820 <SSD1322_DrawUnicode+0x988>)
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	e03d      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  193: { pCharacter = FALCON_DED_FONT_CHAR_193;  } break;
 8001654:	4b73      	ldr	r3, [pc, #460]	; (8001824 <SSD1322_DrawUnicode+0x98c>)
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	e03a      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  194: { pCharacter = FALCON_DED_FONT_CHAR_194;  } break;
 800165a:	4b73      	ldr	r3, [pc, #460]	; (8001828 <SSD1322_DrawUnicode+0x990>)
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	e037      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  195: { pCharacter = FALCON_DED_FONT_CHAR_195;  } break;
 8001660:	4b72      	ldr	r3, [pc, #456]	; (800182c <SSD1322_DrawUnicode+0x994>)
 8001662:	61bb      	str	r3, [r7, #24]
 8001664:	e034      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  196: { pCharacter = FALCON_DED_FONT_CHAR_196;  } break;
 8001666:	4b72      	ldr	r3, [pc, #456]	; (8001830 <SSD1322_DrawUnicode+0x998>)
 8001668:	61bb      	str	r3, [r7, #24]
 800166a:	e031      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  197: { pCharacter = FALCON_DED_FONT_CHAR_197;  } break;
 800166c:	4b71      	ldr	r3, [pc, #452]	; (8001834 <SSD1322_DrawUnicode+0x99c>)
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	e02e      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  198: { pCharacter = FALCON_DED_FONT_CHAR_198;  } break;
 8001672:	4b71      	ldr	r3, [pc, #452]	; (8001838 <SSD1322_DrawUnicode+0x9a0>)
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	e02b      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  199: { pCharacter = FALCON_DED_FONT_CHAR_199;  } break;
 8001678:	4b70      	ldr	r3, [pc, #448]	; (800183c <SSD1322_DrawUnicode+0x9a4>)
 800167a:	61bb      	str	r3, [r7, #24]
 800167c:	e028      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  200: { pCharacter = FALCON_DED_FONT_CHAR_200;  } break;
 800167e:	4b70      	ldr	r3, [pc, #448]	; (8001840 <SSD1322_DrawUnicode+0x9a8>)
 8001680:	61bb      	str	r3, [r7, #24]
 8001682:	e025      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  201: { pCharacter = FALCON_DED_FONT_CHAR_201;  } break;
 8001684:	4b6f      	ldr	r3, [pc, #444]	; (8001844 <SSD1322_DrawUnicode+0x9ac>)
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	e022      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  215: { pCharacter = FALCON_DED_FONT_CHAR_215;  } break;
 800168a:	4b6f      	ldr	r3, [pc, #444]	; (8001848 <SSD1322_DrawUnicode+0x9b0>)
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	e01f      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case  247: { pCharacter = FALCON_DED_FONT_CHAR_247;  } break;
 8001690:	4b6e      	ldr	r3, [pc, #440]	; (800184c <SSD1322_DrawUnicode+0x9b4>)
 8001692:	61bb      	str	r3, [r7, #24]
 8001694:	e01c      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case 8212: { pCharacter = FALCON_DED_FONT_CHAR_8212; } break;
 8001696:	4b6e      	ldr	r3, [pc, #440]	; (8001850 <SSD1322_DrawUnicode+0x9b8>)
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	e019      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case 8218: { pCharacter = FALCON_DED_FONT_CHAR_8218; } break;
 800169c:	4b6d      	ldr	r3, [pc, #436]	; (8001854 <SSD1322_DrawUnicode+0x9bc>)
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	e016      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case 8219: { pCharacter = FALCON_DED_FONT_CHAR_8219; } break;
 80016a2:	4b6d      	ldr	r3, [pc, #436]	; (8001858 <SSD1322_DrawUnicode+0x9c0>)
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	e013      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case 8222: { pCharacter = FALCON_DED_FONT_CHAR_8222; } break;
 80016a8:	4b6c      	ldr	r3, [pc, #432]	; (800185c <SSD1322_DrawUnicode+0x9c4>)
 80016aa:	61bb      	str	r3, [r7, #24]
 80016ac:	e010      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case 8226: { pCharacter = FALCON_DED_FONT_CHAR_8226; } break;
 80016ae:	4b6c      	ldr	r3, [pc, #432]	; (8001860 <SSD1322_DrawUnicode+0x9c8>)
 80016b0:	61bb      	str	r3, [r7, #24]
 80016b2:	e00d      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case 8249: { pCharacter = FALCON_DED_FONT_CHAR_8249; } break;
 80016b4:	4b6b      	ldr	r3, [pc, #428]	; (8001864 <SSD1322_DrawUnicode+0x9cc>)
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	e00a      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case 8250: { pCharacter = FALCON_DED_FONT_CHAR_8250; } break;
 80016ba:	4b6b      	ldr	r3, [pc, #428]	; (8001868 <SSD1322_DrawUnicode+0x9d0>)
 80016bc:	61bb      	str	r3, [r7, #24]
 80016be:	e007      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case 8364: { pCharacter = FALCON_DED_FONT_CHAR_8364; } break;
 80016c0:	4b6a      	ldr	r3, [pc, #424]	; (800186c <SSD1322_DrawUnicode+0x9d4>)
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	e004      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    case 8482: { pCharacter = FALCON_DED_FONT_CHAR_8482; } break;
 80016c6:	4b6a      	ldr	r3, [pc, #424]	; (8001870 <SSD1322_DrawUnicode+0x9d8>)
 80016c8:	61bb      	str	r3, [r7, #24]
 80016ca:	e001      	b.n	80016d0 <SSD1322_DrawUnicode+0x838>
    default:   { return 0;                               } break;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e068      	b.n	80017a2 <SSD1322_DrawUnicode+0x90a>
  }

  for (uint8_t row = 0; row < 11; row++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	75fb      	strb	r3, [r7, #23]
 80016d4:	e061      	b.n	800179a <SSD1322_DrawUnicode+0x902>
  {
    rowData = *pCharacter;
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	83fb      	strh	r3, [r7, #30]

    for (int8_t col = 0; col < 9; col++)
 80016dc:	2300      	movs	r3, #0
 80016de:	75bb      	strb	r3, [r7, #22]
 80016e0:	e051      	b.n	8001786 <SSD1322_DrawUnicode+0x8ee>
    {
      pixelMask = ((x + col) % 2 == 0) ? 0xF0 : 0x0F;
 80016e2:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	4413      	add	r3, r2
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <SSD1322_DrawUnicode+0x85e>
 80016f2:	23f0      	movs	r3, #240	; 0xf0
 80016f4:	e000      	b.n	80016f8 <SSD1322_DrawUnicode+0x860>
 80016f6:	230f      	movs	r3, #15
 80016f8:	753b      	strb	r3, [r7, #20]

      // Clear pixel
      buffer[((y + row) * 128) + ((x + col) / 2)] &= ~pixelMask;
 80016fa:	7dfa      	ldrb	r2, [r7, #23]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	01da      	lsls	r2, r3, #7
 8001702:	f997 1016 	ldrsb.w	r1, [r7, #22]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	440b      	add	r3, r1
 800170a:	0fd9      	lsrs	r1, r3, #31
 800170c:	440b      	add	r3, r1
 800170e:	105b      	asrs	r3, r3, #1
 8001710:	441a      	add	r2, r3
 8001712:	4958      	ldr	r1, [pc, #352]	; (8001874 <SSD1322_DrawUnicode+0x9dc>)
 8001714:	5c8a      	ldrb	r2, [r1, r2]
 8001716:	b251      	sxtb	r1, r2
 8001718:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800171c:	43d2      	mvns	r2, r2
 800171e:	b252      	sxtb	r2, r2
 8001720:	400a      	ands	r2, r1
 8001722:	b250      	sxtb	r0, r2
 8001724:	7df9      	ldrb	r1, [r7, #23]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	440a      	add	r2, r1
 800172a:	01d2      	lsls	r2, r2, #7
 800172c:	4413      	add	r3, r2
 800172e:	b2c1      	uxtb	r1, r0
 8001730:	4a50      	ldr	r2, [pc, #320]	; (8001874 <SSD1322_DrawUnicode+0x9dc>)
 8001732:	54d1      	strb	r1, [r2, r3]

      // Set pixel
      if (rowData & 0x100)
 8001734:	8bfb      	ldrh	r3, [r7, #30]
 8001736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173a:	2b00      	cmp	r3, #0
 800173c:	d01a      	beq.n	8001774 <SSD1322_DrawUnicode+0x8dc>
      {
        buffer[((y + row) * 128) + ((x + col) / 2)] |= (pixelValue & pixelMask);
 800173e:	7dfa      	ldrb	r2, [r7, #23]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4413      	add	r3, r2
 8001744:	01da      	lsls	r2, r3, #7
 8001746:	f997 1016 	ldrsb.w	r1, [r7, #22]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	440b      	add	r3, r1
 800174e:	0fd9      	lsrs	r1, r3, #31
 8001750:	440b      	add	r3, r1
 8001752:	105b      	asrs	r3, r3, #1
 8001754:	441a      	add	r2, r3
 8001756:	4947      	ldr	r1, [pc, #284]	; (8001874 <SSD1322_DrawUnicode+0x9dc>)
 8001758:	5c89      	ldrb	r1, [r1, r2]
 800175a:	7d78      	ldrb	r0, [r7, #21]
 800175c:	7d3a      	ldrb	r2, [r7, #20]
 800175e:	4002      	ands	r2, r0
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	7dfc      	ldrb	r4, [r7, #23]
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	4420      	add	r0, r4
 8001768:	01c0      	lsls	r0, r0, #7
 800176a:	4403      	add	r3, r0
 800176c:	430a      	orrs	r2, r1
 800176e:	b2d1      	uxtb	r1, r2
 8001770:	4a40      	ldr	r2, [pc, #256]	; (8001874 <SSD1322_DrawUnicode+0x9dc>)
 8001772:	54d1      	strb	r1, [r2, r3]
      }
      rowData <<= 1;
 8001774:	8bfb      	ldrh	r3, [r7, #30]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	83fb      	strh	r3, [r7, #30]
    for (int8_t col = 0; col < 9; col++)
 800177a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	3301      	adds	r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	75bb      	strb	r3, [r7, #22]
 8001786:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800178a:	2b08      	cmp	r3, #8
 800178c:	dda9      	ble.n	80016e2 <SSD1322_DrawUnicode+0x84a>
    }

    pCharacter++;
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	3302      	adds	r3, #2
 8001792:	61bb      	str	r3, [r7, #24]
  for (uint8_t row = 0; row < 11; row++)
 8001794:	7dfb      	ldrb	r3, [r7, #23]
 8001796:	3301      	adds	r3, #1
 8001798:	75fb      	strb	r3, [r7, #23]
 800179a:	7dfb      	ldrb	r3, [r7, #23]
 800179c:	2b0a      	cmp	r3, #10
 800179e:	d99a      	bls.n	80016d6 <SSD1322_DrawUnicode+0x83e>
  }

  return 1;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc90      	pop	{r4, r7}
 80017aa:	4770      	bx	lr
 80017ac:	080049d0 	.word	0x080049d0
 80017b0:	080049e8 	.word	0x080049e8
 80017b4:	08004a00 	.word	0x08004a00
 80017b8:	08004a18 	.word	0x08004a18
 80017bc:	08004a30 	.word	0x08004a30
 80017c0:	08004a48 	.word	0x08004a48
 80017c4:	08004a60 	.word	0x08004a60
 80017c8:	08004a78 	.word	0x08004a78
 80017cc:	08004a90 	.word	0x08004a90
 80017d0:	08004aa8 	.word	0x08004aa8
 80017d4:	08004ac0 	.word	0x08004ac0
 80017d8:	08004ad8 	.word	0x08004ad8
 80017dc:	08004af0 	.word	0x08004af0
 80017e0:	08004b08 	.word	0x08004b08
 80017e4:	08004b20 	.word	0x08004b20
 80017e8:	08004b38 	.word	0x08004b38
 80017ec:	08004b50 	.word	0x08004b50
 80017f0:	08004b68 	.word	0x08004b68
 80017f4:	08004b80 	.word	0x08004b80
 80017f8:	08004b98 	.word	0x08004b98
 80017fc:	08004bb0 	.word	0x08004bb0
 8001800:	08004bc8 	.word	0x08004bc8
 8001804:	08004be0 	.word	0x08004be0
 8001808:	08004bf8 	.word	0x08004bf8
 800180c:	08004c10 	.word	0x08004c10
 8001810:	08004c28 	.word	0x08004c28
 8001814:	08004c40 	.word	0x08004c40
 8001818:	08004c58 	.word	0x08004c58
 800181c:	08004c70 	.word	0x08004c70
 8001820:	08004c88 	.word	0x08004c88
 8001824:	08004ca0 	.word	0x08004ca0
 8001828:	08004cb8 	.word	0x08004cb8
 800182c:	08004cd0 	.word	0x08004cd0
 8001830:	08004ce8 	.word	0x08004ce8
 8001834:	08004d00 	.word	0x08004d00
 8001838:	08004d18 	.word	0x08004d18
 800183c:	08004d30 	.word	0x08004d30
 8001840:	08004d48 	.word	0x08004d48
 8001844:	08004d60 	.word	0x08004d60
 8001848:	08004d78 	.word	0x08004d78
 800184c:	08004d90 	.word	0x08004d90
 8001850:	08004da8 	.word	0x08004da8
 8001854:	08004dc0 	.word	0x08004dc0
 8001858:	08004dd8 	.word	0x08004dd8
 800185c:	08004df0 	.word	0x08004df0
 8001860:	08004e08 	.word	0x08004e08
 8001864:	08004e20 	.word	0x08004e20
 8001868:	08004e38 	.word	0x08004e38
 800186c:	08004e50 	.word	0x08004e50
 8001870:	08004e68 	.word	0x08004e68
 8001874:	20000028 	.word	0x20000028

08001878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <HAL_MspInit+0x4c>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <HAL_MspInit+0x4c>)
 8001888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800188c:	6453      	str	r3, [r2, #68]	; 0x44
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <HAL_MspInit+0x4c>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	603b      	str	r3, [r7, #0]
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_MspInit+0x4c>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <HAL_MspInit+0x4c>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_MspInit+0x4c>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018b6:	2007      	movs	r0, #7
 80018b8:	f000 fa96 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40023800 	.word	0x40023800

080018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <NMI_Handler+0x4>

080018ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <HardFault_Handler+0x4>

080018d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <MemManage_Handler+0x4>

080018da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001914:	f000 f956 	bl	8001bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
#if 0
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */
#else
  DMA_IrqHandler(&hdma_usart2_rx);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <DMA1_Stream5_IRQHandler+0x10>)
 8001922:	f7ff f847 	bl	80009b4 <DMA_IrqHandler>
#endif
  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20002684 	.word	0x20002684

08001930 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
#if 0
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
#else
  USART_IrqHandler(&huart2, &hdma_usart2_rx);
 8001934:	4902      	ldr	r1, [pc, #8]	; (8001940 <USART2_IRQHandler+0x10>)
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <USART2_IRQHandler+0x14>)
 8001938:	f7ff f816 	bl	8000968 <USART_IrqHandler>
#endif
  /* USER CODE END USART2_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20002684 	.word	0x20002684
 8001944:	200026e4 	.word	0x200026e4

08001948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <SystemInit+0x28>)
 800194e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001952:	4a07      	ldr	r2, [pc, #28]	; (8001970 <SystemInit+0x28>)
 8001954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SystemInit+0x28>)
 800195e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001962:	609a      	str	r2, [r3, #8]
#endif
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_USART2_UART_Init+0x4c>)
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <MX_USART2_UART_Init+0x50>)
 800197c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <MX_USART2_UART_Init+0x4c>)
 8001980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <MX_USART2_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_USART2_UART_Init+0x4c>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <MX_USART2_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_USART2_UART_Init+0x4c>)
 800199a:	220c      	movs	r2, #12
 800199c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <MX_USART2_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_USART2_UART_Init+0x4c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019aa:	4805      	ldr	r0, [pc, #20]	; (80019c0 <MX_USART2_UART_Init+0x4c>)
 80019ac:	f001 fca6 	bl	80032fc <HAL_UART_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019b6:	f7ff f87d 	bl	8000ab4 <Error_Handler>
  }

}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200026e4 	.word	0x200026e4
 80019c4:	40004400 	.word	0x40004400

080019c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a34      	ldr	r2, [pc, #208]	; (8001ab8 <HAL_UART_MspInit+0xf0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d161      	bne.n	8001aae <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	4b33      	ldr	r3, [pc, #204]	; (8001abc <HAL_UART_MspInit+0xf4>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	4a32      	ldr	r2, [pc, #200]	; (8001abc <HAL_UART_MspInit+0xf4>)
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	6413      	str	r3, [r2, #64]	; 0x40
 80019fa:	4b30      	ldr	r3, [pc, #192]	; (8001abc <HAL_UART_MspInit+0xf4>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b2c      	ldr	r3, [pc, #176]	; (8001abc <HAL_UART_MspInit+0xf4>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a2b      	ldr	r2, [pc, #172]	; (8001abc <HAL_UART_MspInit+0xf4>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b29      	ldr	r3, [pc, #164]	; (8001abc <HAL_UART_MspInit+0xf4>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a22:	230c      	movs	r3, #12
 8001a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a32:	2307      	movs	r3, #7
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4820      	ldr	r0, [pc, #128]	; (8001ac0 <HAL_UART_MspInit+0xf8>)
 8001a3e:	f000 fc1b 	bl	8002278 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_UART_MspInit+0xfc>)
 8001a44:	4a20      	ldr	r2, [pc, #128]	; (8001ac8 <HAL_UART_MspInit+0x100>)
 8001a46:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001a48:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <HAL_UART_MspInit+0xfc>)
 8001a4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a4e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a50:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <HAL_UART_MspInit+0xfc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_UART_MspInit+0xfc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_UART_MspInit+0xfc>)
 8001a5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a62:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <HAL_UART_MspInit+0xfc>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_UART_MspInit+0xfc>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_UART_MspInit+0xfc>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <HAL_UART_MspInit+0xfc>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_UART_MspInit+0xfc>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a82:	4810      	ldr	r0, [pc, #64]	; (8001ac4 <HAL_UART_MspInit+0xfc>)
 8001a84:	f000 f9f2 	bl	8001e6c <HAL_DMA_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001a8e:	f7ff f811 	bl	8000ab4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <HAL_UART_MspInit+0xfc>)
 8001a96:	635a      	str	r2, [r3, #52]	; 0x34
 8001a98:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <HAL_UART_MspInit+0xfc>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2026      	movs	r0, #38	; 0x26
 8001aa4:	f000 f9ab 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001aa8:	2026      	movs	r0, #38	; 0x26
 8001aaa:	f000 f9c4 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001aae:	bf00      	nop
 8001ab0:	3728      	adds	r7, #40	; 0x28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40004400 	.word	0x40004400
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020000 	.word	0x40020000
 8001ac4:	20002684 	.word	0x20002684
 8001ac8:	40026088 	.word	0x40026088

08001acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ad0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ad2:	e003      	b.n	8001adc <LoopCopyDataInit>

08001ad4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ad6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ad8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ada:	3104      	adds	r1, #4

08001adc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001adc:	480b      	ldr	r0, [pc, #44]	; (8001b0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ae0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ae2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ae4:	d3f6      	bcc.n	8001ad4 <CopyDataInit>
  ldr  r2, =_sbss
 8001ae6:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ae8:	e002      	b.n	8001af0 <LoopFillZerobss>

08001aea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001aea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001aec:	f842 3b04 	str.w	r3, [r2], #4

08001af0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001af2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001af4:	d3f9      	bcc.n	8001aea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001af6:	f7ff ff27 	bl	8001948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001afa:	f002 fb35 	bl	8004168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001afe:	f7fe fdb1 	bl	8000664 <main>
  bx  lr    
 8001b02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b04:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001b08:	08004eb0 	.word	0x08004eb0
  ldr  r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b10:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001b14:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001b18:	20002728 	.word	0x20002728

08001b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <ADC_IRQHandler>
	...

08001b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <HAL_Init+0x40>)
 8001b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <HAL_Init+0x40>)
 8001b36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_Init+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <HAL_Init+0x40>)
 8001b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b48:	2003      	movs	r0, #3
 8001b4a:	f000 f94d 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f000 f808 	bl	8001b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b54:	f7ff fe90 	bl	8001878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023c00 	.word	0x40023c00

08001b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_InitTick+0x54>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_InitTick+0x58>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 f965 	bl	8001e52 <HAL_SYSTICK_Config>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00e      	b.n	8001bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b0f      	cmp	r3, #15
 8001b96:	d80a      	bhi.n	8001bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f000 f92d 	bl	8001dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba4:	4a06      	ldr	r2, [pc, #24]	; (8001bc0 <HAL_InitTick+0x5c>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e000      	b.n	8001bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000008 	.word	0x20000008
 8001bc0:	20000004 	.word	0x20000004

08001bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_IncTick+0x20>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_IncTick+0x24>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <HAL_IncTick+0x24>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20000008 	.word	0x20000008
 8001be8:	20002724 	.word	0x20002724

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <HAL_GetTick+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20002724 	.word	0x20002724

08001c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff ffee 	bl	8001bec <HAL_GetTick>
 8001c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1c:	d005      	beq.n	8001c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_Delay+0x40>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c2a:	bf00      	nop
 8001c2c:	f7ff ffde 	bl	8001bec <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d8f7      	bhi.n	8001c2c <HAL_Delay+0x28>
  {
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000008 	.word	0x20000008

08001c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7a:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	60d3      	str	r3, [r2, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	db0b      	blt.n	8001cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	4907      	ldr	r1, [pc, #28]	; (8001ce4 <__NVIC_EnableIRQ+0x38>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2001      	movs	r0, #1
 8001cce:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e100 	.word	0xe000e100

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db0a      	blt.n	8001d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	490c      	ldr	r1, [pc, #48]	; (8001d34 <__NVIC_SetPriority+0x4c>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d10:	e00a      	b.n	8001d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4908      	ldr	r1, [pc, #32]	; (8001d38 <__NVIC_SetPriority+0x50>)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3b04      	subs	r3, #4
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f1c3 0307 	rsb	r3, r3, #7
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf28      	it	cs
 8001d5a:	2304      	movcs	r3, #4
 8001d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3304      	adds	r3, #4
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d902      	bls.n	8001d6c <NVIC_EncodePriority+0x30>
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3b03      	subs	r3, #3
 8001d6a:	e000      	b.n	8001d6e <NVIC_EncodePriority+0x32>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	401a      	ands	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	4313      	orrs	r3, r2
         );
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db4:	d301      	bcc.n	8001dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00f      	b.n	8001dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <SysTick_Config+0x40>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f7ff ff8e 	bl	8001ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <SysTick_Config+0x40>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SysTick_Config+0x40>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff29 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e10:	f7ff ff3e 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	6978      	ldr	r0, [r7, #20]
 8001e1c:	f7ff ff8e 	bl	8001d3c <NVIC_EncodePriority>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff5d 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001e2e:	bf00      	nop
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff31 	bl	8001cac <__NVIC_EnableIRQ>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ffa2 	bl	8001da4 <SysTick_Config>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff feb8 	bl	8001bec <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e099      	b.n	8001fbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea8:	e00f      	b.n	8001eca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eaa:	f7ff fe9f 	bl	8001bec <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b05      	cmp	r3, #5
 8001eb6:	d908      	bls.n	8001eca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e078      	b.n	8001fbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1e8      	bne.n	8001eaa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	4b38      	ldr	r3, [pc, #224]	; (8001fc4 <HAL_DMA_Init+0x158>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d107      	bne.n	8001f34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f023 0307 	bic.w	r3, r3, #7
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d117      	bne.n	8001f8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00e      	beq.n	8001f8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f907 	bl	8002184 <DMA_CheckFifoParam>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2240      	movs	r2, #64	; 0x40
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e016      	b.n	8001fbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8be 	bl	8002118 <DMA_CalcBaseAndBitshift>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa4:	223f      	movs	r2, #63	; 0x3f
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	f010803f 	.word	0xf010803f

08001fc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_DMA_Start_IT+0x26>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e040      	b.n	8002070 <HAL_DMA_Start_IT+0xa8>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d12f      	bne.n	8002062 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2202      	movs	r2, #2
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 f850 	bl	80020bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	223f      	movs	r2, #63	; 0x3f
 8002022:	409a      	lsls	r2, r3
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0216 	orr.w	r2, r2, #22
 8002036:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	2b00      	cmp	r3, #0
 800203e:	d007      	beq.n	8002050 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0208 	orr.w	r2, r2, #8
 800204e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	e005      	b.n	800206e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800206a:	2302      	movs	r3, #2
 800206c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800206e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d004      	beq.n	8002096 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2280      	movs	r2, #128	; 0x80
 8002090:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e00c      	b.n	80020b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2205      	movs	r2, #5
 800209a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0201 	bic.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b40      	cmp	r3, #64	; 0x40
 80020e8:	d108      	bne.n	80020fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020fa:	e007      	b.n	800210c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	60da      	str	r2, [r3, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	3b10      	subs	r3, #16
 8002128:	4a14      	ldr	r2, [pc, #80]	; (800217c <DMA_CalcBaseAndBitshift+0x64>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002132:	4a13      	ldr	r2, [pc, #76]	; (8002180 <DMA_CalcBaseAndBitshift+0x68>)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b03      	cmp	r3, #3
 8002144:	d909      	bls.n	800215a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800214e:	f023 0303 	bic.w	r3, r3, #3
 8002152:	1d1a      	adds	r2, r3, #4
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	659a      	str	r2, [r3, #88]	; 0x58
 8002158:	e007      	b.n	800216a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002162:	f023 0303 	bic.w	r3, r3, #3
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800216e:	4618      	mov	r0, r3
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	aaaaaaab 	.word	0xaaaaaaab
 8002180:	08004e98 	.word	0x08004e98

08002184 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d11f      	bne.n	80021de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d855      	bhi.n	8002250 <DMA_CheckFifoParam+0xcc>
 80021a4:	a201      	add	r2, pc, #4	; (adr r2, 80021ac <DMA_CheckFifoParam+0x28>)
 80021a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021aa:	bf00      	nop
 80021ac:	080021bd 	.word	0x080021bd
 80021b0:	080021cf 	.word	0x080021cf
 80021b4:	080021bd 	.word	0x080021bd
 80021b8:	08002251 	.word	0x08002251
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d045      	beq.n	8002254 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021cc:	e042      	b.n	8002254 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021d6:	d13f      	bne.n	8002258 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021dc:	e03c      	b.n	8002258 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021e6:	d121      	bne.n	800222c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d836      	bhi.n	800225c <DMA_CheckFifoParam+0xd8>
 80021ee:	a201      	add	r2, pc, #4	; (adr r2, 80021f4 <DMA_CheckFifoParam+0x70>)
 80021f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f4:	08002205 	.word	0x08002205
 80021f8:	0800220b 	.word	0x0800220b
 80021fc:	08002205 	.word	0x08002205
 8002200:	0800221d 	.word	0x0800221d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
      break;
 8002208:	e02f      	b.n	800226a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d024      	beq.n	8002260 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800221a:	e021      	b.n	8002260 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002224:	d11e      	bne.n	8002264 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800222a:	e01b      	b.n	8002264 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d902      	bls.n	8002238 <DMA_CheckFifoParam+0xb4>
 8002232:	2b03      	cmp	r3, #3
 8002234:	d003      	beq.n	800223e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002236:	e018      	b.n	800226a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
      break;
 800223c:	e015      	b.n	800226a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00e      	beq.n	8002268 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	73fb      	strb	r3, [r7, #15]
      break;
 800224e:	e00b      	b.n	8002268 <DMA_CheckFifoParam+0xe4>
      break;
 8002250:	bf00      	nop
 8002252:	e00a      	b.n	800226a <DMA_CheckFifoParam+0xe6>
      break;
 8002254:	bf00      	nop
 8002256:	e008      	b.n	800226a <DMA_CheckFifoParam+0xe6>
      break;
 8002258:	bf00      	nop
 800225a:	e006      	b.n	800226a <DMA_CheckFifoParam+0xe6>
      break;
 800225c:	bf00      	nop
 800225e:	e004      	b.n	800226a <DMA_CheckFifoParam+0xe6>
      break;
 8002260:	bf00      	nop
 8002262:	e002      	b.n	800226a <DMA_CheckFifoParam+0xe6>
      break;   
 8002264:	bf00      	nop
 8002266:	e000      	b.n	800226a <DMA_CheckFifoParam+0xe6>
      break;
 8002268:	bf00      	nop
    }
  } 
  
  return status; 
 800226a:	7bfb      	ldrb	r3, [r7, #15]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	; 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	e159      	b.n	8002548 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002294:	2201      	movs	r2, #1
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	f040 8148 	bne.w	8002542 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d00b      	beq.n	80022d2 <HAL_GPIO_Init+0x5a>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d007      	beq.n	80022d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022c6:	2b11      	cmp	r3, #17
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b12      	cmp	r3, #18
 80022d0:	d130      	bne.n	8002334 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002308:	2201      	movs	r2, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 0201 	and.w	r2, r3, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0xfc>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b12      	cmp	r3, #18
 8002372:	d123      	bne.n	80023bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	08da      	lsrs	r2, r3, #3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3208      	adds	r2, #8
 800237c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	220f      	movs	r2, #15
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	08da      	lsrs	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3208      	adds	r2, #8
 80023b6:	69b9      	ldr	r1, [r7, #24]
 80023b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	2203      	movs	r2, #3
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0203 	and.w	r2, r3, #3
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 80a2 	beq.w	8002542 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	4b56      	ldr	r3, [pc, #344]	; (800255c <HAL_GPIO_Init+0x2e4>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	4a55      	ldr	r2, [pc, #340]	; (800255c <HAL_GPIO_Init+0x2e4>)
 8002408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800240c:	6453      	str	r3, [r2, #68]	; 0x44
 800240e:	4b53      	ldr	r3, [pc, #332]	; (800255c <HAL_GPIO_Init+0x2e4>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800241a:	4a51      	ldr	r2, [pc, #324]	; (8002560 <HAL_GPIO_Init+0x2e8>)
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	089b      	lsrs	r3, r3, #2
 8002420:	3302      	adds	r3, #2
 8002422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	220f      	movs	r2, #15
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a48      	ldr	r2, [pc, #288]	; (8002564 <HAL_GPIO_Init+0x2ec>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d019      	beq.n	800247a <HAL_GPIO_Init+0x202>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a47      	ldr	r2, [pc, #284]	; (8002568 <HAL_GPIO_Init+0x2f0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d013      	beq.n	8002476 <HAL_GPIO_Init+0x1fe>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a46      	ldr	r2, [pc, #280]	; (800256c <HAL_GPIO_Init+0x2f4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00d      	beq.n	8002472 <HAL_GPIO_Init+0x1fa>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a45      	ldr	r2, [pc, #276]	; (8002570 <HAL_GPIO_Init+0x2f8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d007      	beq.n	800246e <HAL_GPIO_Init+0x1f6>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a44      	ldr	r2, [pc, #272]	; (8002574 <HAL_GPIO_Init+0x2fc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d101      	bne.n	800246a <HAL_GPIO_Init+0x1f2>
 8002466:	2304      	movs	r3, #4
 8002468:	e008      	b.n	800247c <HAL_GPIO_Init+0x204>
 800246a:	2307      	movs	r3, #7
 800246c:	e006      	b.n	800247c <HAL_GPIO_Init+0x204>
 800246e:	2303      	movs	r3, #3
 8002470:	e004      	b.n	800247c <HAL_GPIO_Init+0x204>
 8002472:	2302      	movs	r3, #2
 8002474:	e002      	b.n	800247c <HAL_GPIO_Init+0x204>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <HAL_GPIO_Init+0x204>
 800247a:	2300      	movs	r3, #0
 800247c:	69fa      	ldr	r2, [r7, #28]
 800247e:	f002 0203 	and.w	r2, r2, #3
 8002482:	0092      	lsls	r2, r2, #2
 8002484:	4093      	lsls	r3, r2
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800248c:	4934      	ldr	r1, [pc, #208]	; (8002560 <HAL_GPIO_Init+0x2e8>)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	089b      	lsrs	r3, r3, #2
 8002492:	3302      	adds	r3, #2
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800249a:	4b37      	ldr	r3, [pc, #220]	; (8002578 <HAL_GPIO_Init+0x300>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024be:	4a2e      	ldr	r2, [pc, #184]	; (8002578 <HAL_GPIO_Init+0x300>)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024c4:	4b2c      	ldr	r3, [pc, #176]	; (8002578 <HAL_GPIO_Init+0x300>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024e8:	4a23      	ldr	r2, [pc, #140]	; (8002578 <HAL_GPIO_Init+0x300>)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_GPIO_Init+0x300>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002512:	4a19      	ldr	r2, [pc, #100]	; (8002578 <HAL_GPIO_Init+0x300>)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002518:	4b17      	ldr	r3, [pc, #92]	; (8002578 <HAL_GPIO_Init+0x300>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800253c:	4a0e      	ldr	r2, [pc, #56]	; (8002578 <HAL_GPIO_Init+0x300>)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3301      	adds	r3, #1
 8002546:	61fb      	str	r3, [r7, #28]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	2b0f      	cmp	r3, #15
 800254c:	f67f aea2 	bls.w	8002294 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002550:	bf00      	nop
 8002552:	3724      	adds	r7, #36	; 0x24
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	40023800 	.word	0x40023800
 8002560:	40013800 	.word	0x40013800
 8002564:	40020000 	.word	0x40020000
 8002568:	40020400 	.word	0x40020400
 800256c:	40020800 	.word	0x40020800
 8002570:	40020c00 	.word	0x40020c00
 8002574:	40021000 	.word	0x40021000
 8002578:	40013c00 	.word	0x40013c00

0800257c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
 8002588:	4613      	mov	r3, r2
 800258a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002592:	887a      	ldrh	r2, [r7, #2]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002598:	e003      	b.n	80025a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800259a:	887b      	ldrh	r3, [r7, #2]
 800259c:	041a      	lsls	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	619a      	str	r2, [r3, #24]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e25b      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d075      	beq.n	80026ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ce:	4ba3      	ldr	r3, [pc, #652]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d00c      	beq.n	80025f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025da:	4ba0      	ldr	r3, [pc, #640]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d112      	bne.n	800260c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025e6:	4b9d      	ldr	r3, [pc, #628]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025f2:	d10b      	bne.n	800260c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f4:	4b99      	ldr	r3, [pc, #612]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d05b      	beq.n	80026b8 <HAL_RCC_OscConfig+0x108>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d157      	bne.n	80026b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e236      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002614:	d106      	bne.n	8002624 <HAL_RCC_OscConfig+0x74>
 8002616:	4b91      	ldr	r3, [pc, #580]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a90      	ldr	r2, [pc, #576]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 800261c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e01d      	b.n	8002660 <HAL_RCC_OscConfig+0xb0>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0x98>
 800262e:	4b8b      	ldr	r3, [pc, #556]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a8a      	ldr	r2, [pc, #552]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 8002634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	4b88      	ldr	r3, [pc, #544]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a87      	ldr	r2, [pc, #540]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e00b      	b.n	8002660 <HAL_RCC_OscConfig+0xb0>
 8002648:	4b84      	ldr	r3, [pc, #528]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a83      	ldr	r2, [pc, #524]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 800264e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b81      	ldr	r3, [pc, #516]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a80      	ldr	r2, [pc, #512]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 800265a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800265e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d013      	beq.n	8002690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7ff fac0 	bl	8001bec <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002670:	f7ff fabc 	bl	8001bec <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	; 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e1fb      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	4b76      	ldr	r3, [pc, #472]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0xc0>
 800268e:	e014      	b.n	80026ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7ff faac 	bl	8001bec <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002698:	f7ff faa8 	bl	8001bec <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b64      	cmp	r3, #100	; 0x64
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e1e7      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	4b6c      	ldr	r3, [pc, #432]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0xe8>
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d063      	beq.n	800278e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026c6:	4b65      	ldr	r3, [pc, #404]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00b      	beq.n	80026ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d2:	4b62      	ldr	r3, [pc, #392]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d11c      	bne.n	8002718 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026de:	4b5f      	ldr	r3, [pc, #380]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d116      	bne.n	8002718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ea:	4b5c      	ldr	r3, [pc, #368]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d005      	beq.n	8002702 <HAL_RCC_OscConfig+0x152>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d001      	beq.n	8002702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e1bb      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002702:	4b56      	ldr	r3, [pc, #344]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4952      	ldr	r1, [pc, #328]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 8002712:	4313      	orrs	r3, r2
 8002714:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002716:	e03a      	b.n	800278e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d020      	beq.n	8002762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002720:	4b4f      	ldr	r3, [pc, #316]	; (8002860 <HAL_RCC_OscConfig+0x2b0>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7ff fa61 	bl	8001bec <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800272e:	f7ff fa5d 	bl	8001bec <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e19c      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	4b46      	ldr	r3, [pc, #280]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274c:	4b43      	ldr	r3, [pc, #268]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4940      	ldr	r1, [pc, #256]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 800275c:	4313      	orrs	r3, r2
 800275e:	600b      	str	r3, [r1, #0]
 8002760:	e015      	b.n	800278e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002762:	4b3f      	ldr	r3, [pc, #252]	; (8002860 <HAL_RCC_OscConfig+0x2b0>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7ff fa40 	bl	8001bec <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002770:	f7ff fa3c 	bl	8001bec <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e17b      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002782:	4b36      	ldr	r3, [pc, #216]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d030      	beq.n	80027fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d016      	beq.n	80027d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a2:	4b30      	ldr	r3, [pc, #192]	; (8002864 <HAL_RCC_OscConfig+0x2b4>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7ff fa20 	bl	8001bec <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027b0:	f7ff fa1c 	bl	8001bec <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e15b      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	4b26      	ldr	r3, [pc, #152]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x200>
 80027ce:	e015      	b.n	80027fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d0:	4b24      	ldr	r3, [pc, #144]	; (8002864 <HAL_RCC_OscConfig+0x2b4>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d6:	f7ff fa09 	bl	8001bec <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027de:	f7ff fa05 	bl	8001bec <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e144      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f0:	4b1a      	ldr	r3, [pc, #104]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 80027f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80a0 	beq.w	800294a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800280a:	2300      	movs	r3, #0
 800280c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280e:	4b13      	ldr	r3, [pc, #76]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10f      	bne.n	800283a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	4b0f      	ldr	r3, [pc, #60]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	4a0e      	ldr	r2, [pc, #56]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 8002824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002828:	6413      	str	r3, [r2, #64]	; 0x40
 800282a:	4b0c      	ldr	r3, [pc, #48]	; (800285c <HAL_RCC_OscConfig+0x2ac>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002836:	2301      	movs	r3, #1
 8002838:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_OscConfig+0x2b8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d121      	bne.n	800288a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <HAL_RCC_OscConfig+0x2b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a07      	ldr	r2, [pc, #28]	; (8002868 <HAL_RCC_OscConfig+0x2b8>)
 800284c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002852:	f7ff f9cb 	bl	8001bec <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	e011      	b.n	800287e <HAL_RCC_OscConfig+0x2ce>
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	42470000 	.word	0x42470000
 8002864:	42470e80 	.word	0x42470e80
 8002868:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286c:	f7ff f9be 	bl	8001bec <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e0fd      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	4b81      	ldr	r3, [pc, #516]	; (8002a84 <HAL_RCC_OscConfig+0x4d4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d106      	bne.n	80028a0 <HAL_RCC_OscConfig+0x2f0>
 8002892:	4b7d      	ldr	r3, [pc, #500]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002896:	4a7c      	ldr	r2, [pc, #496]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6713      	str	r3, [r2, #112]	; 0x70
 800289e:	e01c      	b.n	80028da <HAL_RCC_OscConfig+0x32a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	d10c      	bne.n	80028c2 <HAL_RCC_OscConfig+0x312>
 80028a8:	4b77      	ldr	r3, [pc, #476]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a76      	ldr	r2, [pc, #472]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 80028ae:	f043 0304 	orr.w	r3, r3, #4
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
 80028b4:	4b74      	ldr	r3, [pc, #464]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b8:	4a73      	ldr	r2, [pc, #460]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	6713      	str	r3, [r2, #112]	; 0x70
 80028c0:	e00b      	b.n	80028da <HAL_RCC_OscConfig+0x32a>
 80028c2:	4b71      	ldr	r3, [pc, #452]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	4a70      	ldr	r2, [pc, #448]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 80028c8:	f023 0301 	bic.w	r3, r3, #1
 80028cc:	6713      	str	r3, [r2, #112]	; 0x70
 80028ce:	4b6e      	ldr	r3, [pc, #440]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	4a6d      	ldr	r2, [pc, #436]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 80028d4:	f023 0304 	bic.w	r3, r3, #4
 80028d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d015      	beq.n	800290e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e2:	f7ff f983 	bl	8001bec <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e8:	e00a      	b.n	8002900 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ea:	f7ff f97f 	bl	8001bec <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e0bc      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002900:	4b61      	ldr	r3, [pc, #388]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0ee      	beq.n	80028ea <HAL_RCC_OscConfig+0x33a>
 800290c:	e014      	b.n	8002938 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290e:	f7ff f96d 	bl	8001bec <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002914:	e00a      	b.n	800292c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002916:	f7ff f969 	bl	8001bec <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f241 3288 	movw	r2, #5000	; 0x1388
 8002924:	4293      	cmp	r3, r2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e0a6      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292c:	4b56      	ldr	r3, [pc, #344]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1ee      	bne.n	8002916 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002938:	7dfb      	ldrb	r3, [r7, #23]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d105      	bne.n	800294a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800293e:	4b52      	ldr	r3, [pc, #328]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	4a51      	ldr	r2, [pc, #324]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 8002944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002948:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8092 	beq.w	8002a78 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002954:	4b4c      	ldr	r3, [pc, #304]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b08      	cmp	r3, #8
 800295e:	d05c      	beq.n	8002a1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d141      	bne.n	80029ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002968:	4b48      	ldr	r3, [pc, #288]	; (8002a8c <HAL_RCC_OscConfig+0x4dc>)
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296e:	f7ff f93d 	bl	8001bec <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002976:	f7ff f939 	bl	8001bec <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e078      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002988:	4b3f      	ldr	r3, [pc, #252]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f0      	bne.n	8002976 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69da      	ldr	r2, [r3, #28]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	019b      	lsls	r3, r3, #6
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	085b      	lsrs	r3, r3, #1
 80029ac:	3b01      	subs	r3, #1
 80029ae:	041b      	lsls	r3, r3, #16
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b6:	061b      	lsls	r3, r3, #24
 80029b8:	4933      	ldr	r1, [pc, #204]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029be:	4b33      	ldr	r3, [pc, #204]	; (8002a8c <HAL_RCC_OscConfig+0x4dc>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7ff f912 	bl	8001bec <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7ff f90e 	bl	8001bec <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e04d      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0x41c>
 80029ea:	e045      	b.n	8002a78 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <HAL_RCC_OscConfig+0x4dc>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f2:	f7ff f8fb 	bl	8001bec <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fa:	f7ff f8f7 	bl	8001bec <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e036      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f0      	bne.n	80029fa <HAL_RCC_OscConfig+0x44a>
 8002a18:	e02e      	b.n	8002a78 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e029      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_RCC_OscConfig+0x4d8>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d11c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d115      	bne.n	8002a74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a4e:	4013      	ands	r3, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d10d      	bne.n	8002a74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d106      	bne.n	8002a74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40007000 	.word	0x40007000
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	42470060 	.word	0x42470060

08002a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0cc      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b68      	ldr	r3, [pc, #416]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d90c      	bls.n	8002acc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b65      	ldr	r3, [pc, #404]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b63      	ldr	r3, [pc, #396]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0b8      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d020      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae4:	4b59      	ldr	r3, [pc, #356]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a58      	ldr	r2, [pc, #352]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002afc:	4b53      	ldr	r3, [pc, #332]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4a52      	ldr	r2, [pc, #328]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b08:	4b50      	ldr	r3, [pc, #320]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	494d      	ldr	r1, [pc, #308]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d044      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d107      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	4b47      	ldr	r3, [pc, #284]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d119      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e07f      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d003      	beq.n	8002b4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d107      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4e:	4b3f      	ldr	r3, [pc, #252]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e06f      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5e:	4b3b      	ldr	r3, [pc, #236]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e067      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b6e:	4b37      	ldr	r3, [pc, #220]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f023 0203 	bic.w	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	4934      	ldr	r1, [pc, #208]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b80:	f7ff f834 	bl	8001bec <HAL_GetTick>
 8002b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	e00a      	b.n	8002b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b88:	f7ff f830 	bl	8001bec <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e04f      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9e:	4b2b      	ldr	r3, [pc, #172]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 020c 	and.w	r2, r3, #12
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d1eb      	bne.n	8002b88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d20c      	bcs.n	8002bd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e032      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be4:	4b19      	ldr	r3, [pc, #100]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4916      	ldr	r1, [pc, #88]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c02:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	490e      	ldr	r1, [pc, #56]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c16:	f000 f821 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8002c1a:	4601      	mov	r1, r0
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002c28:	5cd3      	ldrb	r3, [r2, r3]
 8002c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c2e:	4a09      	ldr	r2, [pc, #36]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe ff94 	bl	8001b64 <HAL_InitTick>

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023c00 	.word	0x40023c00
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	08004e80 	.word	0x08004e80
 8002c54:	20000000 	.word	0x20000000
 8002c58:	20000004 	.word	0x20000004

08002c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c72:	4b63      	ldr	r3, [pc, #396]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d007      	beq.n	8002c8e <HAL_RCC_GetSysClockFreq+0x32>
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d008      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x38>
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f040 80b4 	bne.w	8002df0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c88:	4b5e      	ldr	r3, [pc, #376]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c8a:	60bb      	str	r3, [r7, #8]
       break;
 8002c8c:	e0b3      	b.n	8002df6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c8e:	4b5e      	ldr	r3, [pc, #376]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002c90:	60bb      	str	r3, [r7, #8]
      break;
 8002c92:	e0b0      	b.n	8002df6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c94:	4b5a      	ldr	r3, [pc, #360]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c9e:	4b58      	ldr	r3, [pc, #352]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d04a      	beq.n	8002d40 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002caa:	4b55      	ldr	r3, [pc, #340]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	099b      	lsrs	r3, r3, #6
 8002cb0:	f04f 0400 	mov.w	r4, #0
 8002cb4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	ea03 0501 	and.w	r5, r3, r1
 8002cc0:	ea04 0602 	and.w	r6, r4, r2
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	4632      	mov	r2, r6
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	f04f 0400 	mov.w	r4, #0
 8002cd0:	0154      	lsls	r4, r2, #5
 8002cd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cd6:	014b      	lsls	r3, r1, #5
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4622      	mov	r2, r4
 8002cdc:	1b49      	subs	r1, r1, r5
 8002cde:	eb62 0206 	sbc.w	r2, r2, r6
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	f04f 0400 	mov.w	r4, #0
 8002cea:	0194      	lsls	r4, r2, #6
 8002cec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002cf0:	018b      	lsls	r3, r1, #6
 8002cf2:	1a5b      	subs	r3, r3, r1
 8002cf4:	eb64 0402 	sbc.w	r4, r4, r2
 8002cf8:	f04f 0100 	mov.w	r1, #0
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	00e2      	lsls	r2, r4, #3
 8002d02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d06:	00d9      	lsls	r1, r3, #3
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4614      	mov	r4, r2
 8002d0c:	195b      	adds	r3, r3, r5
 8002d0e:	eb44 0406 	adc.w	r4, r4, r6
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	0262      	lsls	r2, r4, #9
 8002d1c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d20:	0259      	lsls	r1, r3, #9
 8002d22:	460b      	mov	r3, r1
 8002d24:	4614      	mov	r4, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	4621      	mov	r1, r4
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f04f 0400 	mov.w	r4, #0
 8002d30:	461a      	mov	r2, r3
 8002d32:	4623      	mov	r3, r4
 8002d34:	f7fd fa4e 	bl	80001d4 <__aeabi_uldivmod>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	460c      	mov	r4, r1
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	e049      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d40:	4b2f      	ldr	r3, [pc, #188]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	099b      	lsrs	r3, r3, #6
 8002d46:	f04f 0400 	mov.w	r4, #0
 8002d4a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	ea03 0501 	and.w	r5, r3, r1
 8002d56:	ea04 0602 	and.w	r6, r4, r2
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	4632      	mov	r2, r6
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	f04f 0400 	mov.w	r4, #0
 8002d66:	0154      	lsls	r4, r2, #5
 8002d68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d6c:	014b      	lsls	r3, r1, #5
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4622      	mov	r2, r4
 8002d72:	1b49      	subs	r1, r1, r5
 8002d74:	eb62 0206 	sbc.w	r2, r2, r6
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	f04f 0400 	mov.w	r4, #0
 8002d80:	0194      	lsls	r4, r2, #6
 8002d82:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d86:	018b      	lsls	r3, r1, #6
 8002d88:	1a5b      	subs	r3, r3, r1
 8002d8a:	eb64 0402 	sbc.w	r4, r4, r2
 8002d8e:	f04f 0100 	mov.w	r1, #0
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	00e2      	lsls	r2, r4, #3
 8002d98:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d9c:	00d9      	lsls	r1, r3, #3
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4614      	mov	r4, r2
 8002da2:	195b      	adds	r3, r3, r5
 8002da4:	eb44 0406 	adc.w	r4, r4, r6
 8002da8:	f04f 0100 	mov.w	r1, #0
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	02a2      	lsls	r2, r4, #10
 8002db2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002db6:	0299      	lsls	r1, r3, #10
 8002db8:	460b      	mov	r3, r1
 8002dba:	4614      	mov	r4, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f04f 0400 	mov.w	r4, #0
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4623      	mov	r3, r4
 8002dca:	f7fd fa03 	bl	80001d4 <__aeabi_uldivmod>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	460c      	mov	r4, r1
 8002dd2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dd4:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	0c1b      	lsrs	r3, r3, #16
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	3301      	adds	r3, #1
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	60bb      	str	r3, [r7, #8]
      break;
 8002dee:	e002      	b.n	8002df6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002df2:	60bb      	str	r3, [r7, #8]
      break;
 8002df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002df6:	68bb      	ldr	r3, [r7, #8]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e00:	40023800 	.word	0x40023800
 8002e04:	00f42400 	.word	0x00f42400
 8002e08:	007a1200 	.word	0x007a1200

08002e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000000 	.word	0x20000000

08002e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e28:	f7ff fff0 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e2c:	4601      	mov	r1, r0
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	0a9b      	lsrs	r3, r3, #10
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	4a03      	ldr	r2, [pc, #12]	; (8002e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e3a:	5cd3      	ldrb	r3, [r2, r3]
 8002e3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	08004e90 	.word	0x08004e90

08002e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e50:	f7ff ffdc 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e54:	4601      	mov	r1, r0
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	0b5b      	lsrs	r3, r3, #13
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4a03      	ldr	r2, [pc, #12]	; (8002e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e62:	5cd3      	ldrb	r3, [r2, r3]
 8002e64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	08004e90 	.word	0x08004e90

08002e74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e056      	b.n	8002f34 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d106      	bne.n	8002ea6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7fd fe41 	bl	8000b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ebc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	ea42 0103 	orr.w	r1, r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	0c1b      	lsrs	r3, r3, #16
 8002f04:	f003 0104 	and.w	r1, r3, #4
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	69da      	ldr	r2, [r3, #28]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_SPI_Transmit+0x22>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e11e      	b.n	800319c <HAL_SPI_Transmit+0x260>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f66:	f7fe fe41 	bl	8001bec <HAL_GetTick>
 8002f6a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d002      	beq.n	8002f82 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f80:	e103      	b.n	800318a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <HAL_SPI_Transmit+0x52>
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d102      	bne.n	8002f94 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f92:	e0fa      	b.n	800318a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2203      	movs	r2, #3
 8002f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	88fa      	ldrh	r2, [r7, #6]
 8002fac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	88fa      	ldrh	r2, [r7, #6]
 8002fb2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fda:	d107      	bne.n	8002fec <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff6:	2b40      	cmp	r3, #64	; 0x40
 8002ff8:	d007      	beq.n	800300a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003008:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003012:	d14b      	bne.n	80030ac <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_SPI_Transmit+0xe6>
 800301c:	8afb      	ldrh	r3, [r7, #22]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d13e      	bne.n	80030a0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	881a      	ldrh	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	1c9a      	adds	r2, r3, #2
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003046:	e02b      	b.n	80030a0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b02      	cmp	r3, #2
 8003054:	d112      	bne.n	800307c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	881a      	ldrh	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	1c9a      	adds	r2, r3, #2
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	86da      	strh	r2, [r3, #54]	; 0x36
 800307a:	e011      	b.n	80030a0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800307c:	f7fe fdb6 	bl	8001bec <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d803      	bhi.n	8003094 <HAL_SPI_Transmit+0x158>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003092:	d102      	bne.n	800309a <HAL_SPI_Transmit+0x15e>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d102      	bne.n	80030a0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800309e:	e074      	b.n	800318a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1ce      	bne.n	8003048 <HAL_SPI_Transmit+0x10c>
 80030aa:	e04c      	b.n	8003146 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <HAL_SPI_Transmit+0x17e>
 80030b4:	8afb      	ldrh	r3, [r7, #22]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d140      	bne.n	800313c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	330c      	adds	r3, #12
 80030c4:	7812      	ldrb	r2, [r2, #0]
 80030c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80030e0:	e02c      	b.n	800313c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d113      	bne.n	8003118 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	330c      	adds	r3, #12
 80030fa:	7812      	ldrb	r2, [r2, #0]
 80030fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800310c:	b29b      	uxth	r3, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	86da      	strh	r2, [r3, #54]	; 0x36
 8003116:	e011      	b.n	800313c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003118:	f7fe fd68 	bl	8001bec <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d803      	bhi.n	8003130 <HAL_SPI_Transmit+0x1f4>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312e:	d102      	bne.n	8003136 <HAL_SPI_Transmit+0x1fa>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d102      	bne.n	800313c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	77fb      	strb	r3, [r7, #31]
          goto error;
 800313a:	e026      	b.n	800318a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1cd      	bne.n	80030e2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	6839      	ldr	r1, [r7, #0]
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f894 	bl	8003278 <SPI_EndRxTxTransaction>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10a      	bne.n	800317a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	77fb      	strb	r3, [r7, #31]
 8003186:	e000      	b.n	800318a <HAL_SPI_Transmit+0x24e>
  }

error:
 8003188:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800319a:	7ffb      	ldrb	r3, [r7, #31]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3720      	adds	r7, #32
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031b4:	e04c      	b.n	8003250 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031bc:	d048      	beq.n	8003250 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80031be:	f7fe fd15 	bl	8001bec <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d902      	bls.n	80031d4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d13d      	bne.n	8003250 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ec:	d111      	bne.n	8003212 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f6:	d004      	beq.n	8003202 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003200:	d107      	bne.n	8003212 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003210:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800321a:	d10f      	bne.n	800323c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800323a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e00f      	b.n	8003270 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	4013      	ands	r3, r2
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	429a      	cmp	r2, r3
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	429a      	cmp	r2, r3
 800326c:	d1a3      	bne.n	80031b6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003284:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <SPI_EndRxTxTransaction+0x7c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1b      	ldr	r2, [pc, #108]	; (80032f8 <SPI_EndRxTxTransaction+0x80>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	0d5b      	lsrs	r3, r3, #21
 8003290:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003294:	fb02 f303 	mul.w	r3, r2, r3
 8003298:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032a2:	d112      	bne.n	80032ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2200      	movs	r2, #0
 80032ac:	2180      	movs	r1, #128	; 0x80
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f7ff ff78 	bl	80031a4 <SPI_WaitFlagStateUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d016      	beq.n	80032e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032be:	f043 0220 	orr.w	r2, r3, #32
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e00f      	b.n	80032ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e0:	2b80      	cmp	r3, #128	; 0x80
 80032e2:	d0f2      	beq.n	80032ca <SPI_EndRxTxTransaction+0x52>
 80032e4:	e000      	b.n	80032e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80032e6:	bf00      	nop
  }

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000000 	.word	0x20000000
 80032f8:	165e9f81 	.word	0x165e9f81

080032fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e03f      	b.n	800338e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fe fb50 	bl	80019c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2224      	movs	r2, #36	; 0x24
 800332c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800333e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fb95 	bl	8003a70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003354:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003364:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003374:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	4613      	mov	r3, r2
 80033a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	d166      	bne.n	8003480 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_UART_Receive_DMA+0x26>
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e05f      	b.n	8003482 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_UART_Receive_DMA+0x38>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e058      	b.n	8003482 <HAL_UART_Receive_DMA+0xea>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	88fa      	ldrh	r2, [r7, #6]
 80033e2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2222      	movs	r2, #34	; 0x22
 80033ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f6:	4a25      	ldr	r2, [pc, #148]	; (800348c <HAL_UART_Receive_DMA+0xf4>)
 80033f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	4a24      	ldr	r2, [pc, #144]	; (8003490 <HAL_UART_Receive_DMA+0xf8>)
 8003400:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003406:	4a23      	ldr	r2, [pc, #140]	; (8003494 <HAL_UART_Receive_DMA+0xfc>)
 8003408:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340e:	2200      	movs	r2, #0
 8003410:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003412:	f107 0308 	add.w	r3, r7, #8
 8003416:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3304      	adds	r3, #4
 8003422:	4619      	mov	r1, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	f7fe fdcd 	bl	8001fc8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800345a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695a      	ldr	r2, [r3, #20]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800347a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	e000      	b.n	8003482 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	080036e9 	.word	0x080036e9
 8003490:	08003751 	.word	0x08003751
 8003494:	0800376d 	.word	0x0800376d

08003498 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10d      	bne.n	80034ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_UART_IRQHandler+0x52>
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fa42 	bl	800396c <UART_Receive_IT>
      return;
 80034e8:	e0d1      	b.n	800368e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80b0 	beq.w	8003652 <HAL_UART_IRQHandler+0x1ba>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d105      	bne.n	8003508 <HAL_UART_IRQHandler+0x70>
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80a5 	beq.w	8003652 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_UART_IRQHandler+0x90>
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003520:	f043 0201 	orr.w	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_UART_IRQHandler+0xb0>
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	f043 0202 	orr.w	r2, r3, #2
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_UART_IRQHandler+0xd0>
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	f043 0204 	orr.w	r2, r3, #4
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00f      	beq.n	8003592 <HAL_UART_IRQHandler+0xfa>
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	2b00      	cmp	r3, #0
 800357a:	d104      	bne.n	8003586 <HAL_UART_IRQHandler+0xee>
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358a:	f043 0208 	orr.w	r2, r3, #8
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d078      	beq.n	800368c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <HAL_UART_IRQHandler+0x11c>
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f9dc 	bl	800396c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035be:	2b40      	cmp	r3, #64	; 0x40
 80035c0:	bf0c      	ite	eq
 80035c2:	2301      	moveq	r3, #1
 80035c4:	2300      	movne	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d102      	bne.n	80035dc <HAL_UART_IRQHandler+0x144>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d031      	beq.n	8003640 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f925 	bl	800382c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ec:	2b40      	cmp	r3, #64	; 0x40
 80035ee:	d123      	bne.n	8003638 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035fe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	2b00      	cmp	r3, #0
 8003606:	d013      	beq.n	8003630 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360c:	4a21      	ldr	r2, [pc, #132]	; (8003694 <HAL_UART_IRQHandler+0x1fc>)
 800360e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003614:	4618      	mov	r0, r3
 8003616:	f7fe fd2f 	bl	8002078 <HAL_DMA_Abort_IT>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d016      	beq.n	800364e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800362a:	4610      	mov	r0, r2
 800362c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800362e:	e00e      	b.n	800364e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f84f 	bl	80036d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003636:	e00a      	b.n	800364e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f84b 	bl	80036d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800363e:	e006      	b.n	800364e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f847 	bl	80036d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800364c:	e01e      	b.n	800368c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800364e:	bf00      	nop
    return;
 8003650:	e01c      	b.n	800368c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_UART_IRQHandler+0x1d6>
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f912 	bl	8003890 <UART_Transmit_IT>
    return;
 800366c:	e00f      	b.n	800368e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <HAL_UART_IRQHandler+0x1f6>
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d005      	beq.n	800368e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f95a 	bl	800393c <UART_EndTransmit_IT>
    return;
 8003688:	bf00      	nop
 800368a:	e000      	b.n	800368e <HAL_UART_IRQHandler+0x1f6>
    return;
 800368c:	bf00      	nop
  }
}
 800368e:	3720      	adds	r7, #32
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	08003869 	.word	0x08003869

08003698 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d11e      	bne.n	8003742 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003718:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695a      	ldr	r2, [r3, #20]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0201 	bic.w	r2, r2, #1
 8003728:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003738:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2220      	movs	r2, #32
 800373e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7ff ffb2 	bl	80036ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f7ff ffae 	bl	80036c0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003788:	2b80      	cmp	r3, #128	; 0x80
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b21      	cmp	r3, #33	; 0x21
 800379e:	d108      	bne.n	80037b2 <UART_DMAError+0x46>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2200      	movs	r2, #0
 80037aa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80037ac:	68b8      	ldr	r0, [r7, #8]
 80037ae:	f000 f827 	bl	8003800 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b40      	cmp	r3, #64	; 0x40
 80037be:	bf0c      	ite	eq
 80037c0:	2301      	moveq	r3, #1
 80037c2:	2300      	movne	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b22      	cmp	r3, #34	; 0x22
 80037d2:	d108      	bne.n	80037e6 <UART_DMAError+0x7a>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2200      	movs	r2, #0
 80037de:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80037e0:	68b8      	ldr	r0, [r7, #8]
 80037e2:	f000 f823 	bl	800382c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ea:	f043 0210 	orr.w	r2, r3, #16
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037f2:	68b8      	ldr	r0, [r7, #8]
 80037f4:	f7ff ff6e 	bl	80036d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003816:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003842:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff ff26 	bl	80036d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b21      	cmp	r3, #33	; 0x21
 80038a2:	d144      	bne.n	800392e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ac:	d11a      	bne.n	80038e4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d105      	bne.n	80038d8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	1c9a      	adds	r2, r3, #2
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	621a      	str	r2, [r3, #32]
 80038d6:	e00e      	b.n	80038f6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	621a      	str	r2, [r3, #32]
 80038e2:	e008      	b.n	80038f6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	1c59      	adds	r1, r3, #1
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6211      	str	r1, [r2, #32]
 80038ee:	781a      	ldrb	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29b      	uxth	r3, r3
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	4619      	mov	r1, r3
 8003904:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10f      	bne.n	800392a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003918:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003928:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003952:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff fe9b 	bl	8003698 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b22      	cmp	r3, #34	; 0x22
 800397e:	d171      	bne.n	8003a64 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003988:	d123      	bne.n	80039d2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10e      	bne.n	80039b6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	1c9a      	adds	r2, r3, #2
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28
 80039b4:	e029      	b.n	8003a0a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28
 80039d0:	e01b      	b.n	8003a0a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6858      	ldr	r0, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e4:	1c59      	adds	r1, r3, #1
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6291      	str	r1, [r2, #40]	; 0x28
 80039ea:	b2c2      	uxtb	r2, r0
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	e00c      	b.n	8003a0a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	1c58      	adds	r0, r3, #1
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	6288      	str	r0, [r1, #40]	; 0x28
 8003a02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4619      	mov	r1, r3
 8003a18:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d120      	bne.n	8003a60 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0220 	bic.w	r2, r2, #32
 8003a2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff fe28 	bl	80036ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e002      	b.n	8003a66 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e000      	b.n	8003a66 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003a64:	2302      	movs	r3, #2
  }
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a74:	b085      	sub	sp, #20
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ab2:	f023 030c 	bic.w	r3, r3, #12
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	68f9      	ldr	r1, [r7, #12]
 8003abc:	430b      	orrs	r3, r1
 8003abe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ade:	f040 818b 	bne.w	8003df8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4ac1      	ldr	r2, [pc, #772]	; (8003dec <UART_SetConfig+0x37c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d005      	beq.n	8003af8 <UART_SetConfig+0x88>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4abf      	ldr	r2, [pc, #764]	; (8003df0 <UART_SetConfig+0x380>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	f040 80bd 	bne.w	8003c72 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003af8:	f7ff f9a8 	bl	8002e4c <HAL_RCC_GetPCLK2Freq>
 8003afc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	461d      	mov	r5, r3
 8003b02:	f04f 0600 	mov.w	r6, #0
 8003b06:	46a8      	mov	r8, r5
 8003b08:	46b1      	mov	r9, r6
 8003b0a:	eb18 0308 	adds.w	r3, r8, r8
 8003b0e:	eb49 0409 	adc.w	r4, r9, r9
 8003b12:	4698      	mov	r8, r3
 8003b14:	46a1      	mov	r9, r4
 8003b16:	eb18 0805 	adds.w	r8, r8, r5
 8003b1a:	eb49 0906 	adc.w	r9, r9, r6
 8003b1e:	f04f 0100 	mov.w	r1, #0
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b32:	4688      	mov	r8, r1
 8003b34:	4691      	mov	r9, r2
 8003b36:	eb18 0005 	adds.w	r0, r8, r5
 8003b3a:	eb49 0106 	adc.w	r1, r9, r6
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	461d      	mov	r5, r3
 8003b44:	f04f 0600 	mov.w	r6, #0
 8003b48:	196b      	adds	r3, r5, r5
 8003b4a:	eb46 0406 	adc.w	r4, r6, r6
 8003b4e:	461a      	mov	r2, r3
 8003b50:	4623      	mov	r3, r4
 8003b52:	f7fc fb3f 	bl	80001d4 <__aeabi_uldivmod>
 8003b56:	4603      	mov	r3, r0
 8003b58:	460c      	mov	r4, r1
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	4ba5      	ldr	r3, [pc, #660]	; (8003df4 <UART_SetConfig+0x384>)
 8003b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	461d      	mov	r5, r3
 8003b6c:	f04f 0600 	mov.w	r6, #0
 8003b70:	46a9      	mov	r9, r5
 8003b72:	46b2      	mov	sl, r6
 8003b74:	eb19 0309 	adds.w	r3, r9, r9
 8003b78:	eb4a 040a 	adc.w	r4, sl, sl
 8003b7c:	4699      	mov	r9, r3
 8003b7e:	46a2      	mov	sl, r4
 8003b80:	eb19 0905 	adds.w	r9, r9, r5
 8003b84:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b9c:	4689      	mov	r9, r1
 8003b9e:	4692      	mov	sl, r2
 8003ba0:	eb19 0005 	adds.w	r0, r9, r5
 8003ba4:	eb4a 0106 	adc.w	r1, sl, r6
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	461d      	mov	r5, r3
 8003bae:	f04f 0600 	mov.w	r6, #0
 8003bb2:	196b      	adds	r3, r5, r5
 8003bb4:	eb46 0406 	adc.w	r4, r6, r6
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4623      	mov	r3, r4
 8003bbc:	f7fc fb0a 	bl	80001d4 <__aeabi_uldivmod>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b8b      	ldr	r3, [pc, #556]	; (8003df4 <UART_SetConfig+0x384>)
 8003bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	2164      	movs	r1, #100	; 0x64
 8003bd0:	fb01 f303 	mul.w	r3, r1, r3
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	3332      	adds	r3, #50	; 0x32
 8003bda:	4a86      	ldr	r2, [pc, #536]	; (8003df4 <UART_SetConfig+0x384>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003be8:	4498      	add	r8, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	461d      	mov	r5, r3
 8003bee:	f04f 0600 	mov.w	r6, #0
 8003bf2:	46a9      	mov	r9, r5
 8003bf4:	46b2      	mov	sl, r6
 8003bf6:	eb19 0309 	adds.w	r3, r9, r9
 8003bfa:	eb4a 040a 	adc.w	r4, sl, sl
 8003bfe:	4699      	mov	r9, r3
 8003c00:	46a2      	mov	sl, r4
 8003c02:	eb19 0905 	adds.w	r9, r9, r5
 8003c06:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c0a:	f04f 0100 	mov.w	r1, #0
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c1e:	4689      	mov	r9, r1
 8003c20:	4692      	mov	sl, r2
 8003c22:	eb19 0005 	adds.w	r0, r9, r5
 8003c26:	eb4a 0106 	adc.w	r1, sl, r6
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	461d      	mov	r5, r3
 8003c30:	f04f 0600 	mov.w	r6, #0
 8003c34:	196b      	adds	r3, r5, r5
 8003c36:	eb46 0406 	adc.w	r4, r6, r6
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4623      	mov	r3, r4
 8003c3e:	f7fc fac9 	bl	80001d4 <__aeabi_uldivmod>
 8003c42:	4603      	mov	r3, r0
 8003c44:	460c      	mov	r4, r1
 8003c46:	461a      	mov	r2, r3
 8003c48:	4b6a      	ldr	r3, [pc, #424]	; (8003df4 <UART_SetConfig+0x384>)
 8003c4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	2164      	movs	r1, #100	; 0x64
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	3332      	adds	r3, #50	; 0x32
 8003c5c:	4a65      	ldr	r2, [pc, #404]	; (8003df4 <UART_SetConfig+0x384>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	f003 0207 	and.w	r2, r3, #7
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4442      	add	r2, r8
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	e26f      	b.n	8004152 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c72:	f7ff f8d7 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 8003c76:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	461d      	mov	r5, r3
 8003c7c:	f04f 0600 	mov.w	r6, #0
 8003c80:	46a8      	mov	r8, r5
 8003c82:	46b1      	mov	r9, r6
 8003c84:	eb18 0308 	adds.w	r3, r8, r8
 8003c88:	eb49 0409 	adc.w	r4, r9, r9
 8003c8c:	4698      	mov	r8, r3
 8003c8e:	46a1      	mov	r9, r4
 8003c90:	eb18 0805 	adds.w	r8, r8, r5
 8003c94:	eb49 0906 	adc.w	r9, r9, r6
 8003c98:	f04f 0100 	mov.w	r1, #0
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ca4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ca8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cac:	4688      	mov	r8, r1
 8003cae:	4691      	mov	r9, r2
 8003cb0:	eb18 0005 	adds.w	r0, r8, r5
 8003cb4:	eb49 0106 	adc.w	r1, r9, r6
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	461d      	mov	r5, r3
 8003cbe:	f04f 0600 	mov.w	r6, #0
 8003cc2:	196b      	adds	r3, r5, r5
 8003cc4:	eb46 0406 	adc.w	r4, r6, r6
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4623      	mov	r3, r4
 8003ccc:	f7fc fa82 	bl	80001d4 <__aeabi_uldivmod>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	460c      	mov	r4, r1
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4b47      	ldr	r3, [pc, #284]	; (8003df4 <UART_SetConfig+0x384>)
 8003cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	461d      	mov	r5, r3
 8003ce6:	f04f 0600 	mov.w	r6, #0
 8003cea:	46a9      	mov	r9, r5
 8003cec:	46b2      	mov	sl, r6
 8003cee:	eb19 0309 	adds.w	r3, r9, r9
 8003cf2:	eb4a 040a 	adc.w	r4, sl, sl
 8003cf6:	4699      	mov	r9, r3
 8003cf8:	46a2      	mov	sl, r4
 8003cfa:	eb19 0905 	adds.w	r9, r9, r5
 8003cfe:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d02:	f04f 0100 	mov.w	r1, #0
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d16:	4689      	mov	r9, r1
 8003d18:	4692      	mov	sl, r2
 8003d1a:	eb19 0005 	adds.w	r0, r9, r5
 8003d1e:	eb4a 0106 	adc.w	r1, sl, r6
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	461d      	mov	r5, r3
 8003d28:	f04f 0600 	mov.w	r6, #0
 8003d2c:	196b      	adds	r3, r5, r5
 8003d2e:	eb46 0406 	adc.w	r4, r6, r6
 8003d32:	461a      	mov	r2, r3
 8003d34:	4623      	mov	r3, r4
 8003d36:	f7fc fa4d 	bl	80001d4 <__aeabi_uldivmod>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	461a      	mov	r2, r3
 8003d40:	4b2c      	ldr	r3, [pc, #176]	; (8003df4 <UART_SetConfig+0x384>)
 8003d42:	fba3 1302 	umull	r1, r3, r3, r2
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	2164      	movs	r1, #100	; 0x64
 8003d4a:	fb01 f303 	mul.w	r3, r1, r3
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	3332      	adds	r3, #50	; 0x32
 8003d54:	4a27      	ldr	r2, [pc, #156]	; (8003df4 <UART_SetConfig+0x384>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d62:	4498      	add	r8, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	461d      	mov	r5, r3
 8003d68:	f04f 0600 	mov.w	r6, #0
 8003d6c:	46a9      	mov	r9, r5
 8003d6e:	46b2      	mov	sl, r6
 8003d70:	eb19 0309 	adds.w	r3, r9, r9
 8003d74:	eb4a 040a 	adc.w	r4, sl, sl
 8003d78:	4699      	mov	r9, r3
 8003d7a:	46a2      	mov	sl, r4
 8003d7c:	eb19 0905 	adds.w	r9, r9, r5
 8003d80:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d84:	f04f 0100 	mov.w	r1, #0
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d98:	4689      	mov	r9, r1
 8003d9a:	4692      	mov	sl, r2
 8003d9c:	eb19 0005 	adds.w	r0, r9, r5
 8003da0:	eb4a 0106 	adc.w	r1, sl, r6
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	461d      	mov	r5, r3
 8003daa:	f04f 0600 	mov.w	r6, #0
 8003dae:	196b      	adds	r3, r5, r5
 8003db0:	eb46 0406 	adc.w	r4, r6, r6
 8003db4:	461a      	mov	r2, r3
 8003db6:	4623      	mov	r3, r4
 8003db8:	f7fc fa0c 	bl	80001d4 <__aeabi_uldivmod>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <UART_SetConfig+0x384>)
 8003dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc8:	095b      	lsrs	r3, r3, #5
 8003dca:	2164      	movs	r1, #100	; 0x64
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	3332      	adds	r3, #50	; 0x32
 8003dd6:	4a07      	ldr	r2, [pc, #28]	; (8003df4 <UART_SetConfig+0x384>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	f003 0207 	and.w	r2, r3, #7
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4442      	add	r2, r8
 8003de8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003dea:	e1b2      	b.n	8004152 <UART_SetConfig+0x6e2>
 8003dec:	40011000 	.word	0x40011000
 8003df0:	40011400 	.word	0x40011400
 8003df4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4ad7      	ldr	r2, [pc, #860]	; (800415c <UART_SetConfig+0x6ec>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d005      	beq.n	8003e0e <UART_SetConfig+0x39e>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4ad6      	ldr	r2, [pc, #856]	; (8004160 <UART_SetConfig+0x6f0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	f040 80d1 	bne.w	8003fb0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e0e:	f7ff f81d 	bl	8002e4c <HAL_RCC_GetPCLK2Freq>
 8003e12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	469a      	mov	sl, r3
 8003e18:	f04f 0b00 	mov.w	fp, #0
 8003e1c:	46d0      	mov	r8, sl
 8003e1e:	46d9      	mov	r9, fp
 8003e20:	eb18 0308 	adds.w	r3, r8, r8
 8003e24:	eb49 0409 	adc.w	r4, r9, r9
 8003e28:	4698      	mov	r8, r3
 8003e2a:	46a1      	mov	r9, r4
 8003e2c:	eb18 080a 	adds.w	r8, r8, sl
 8003e30:	eb49 090b 	adc.w	r9, r9, fp
 8003e34:	f04f 0100 	mov.w	r1, #0
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e48:	4688      	mov	r8, r1
 8003e4a:	4691      	mov	r9, r2
 8003e4c:	eb1a 0508 	adds.w	r5, sl, r8
 8003e50:	eb4b 0609 	adc.w	r6, fp, r9
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	f04f 0400 	mov.w	r4, #0
 8003e66:	0094      	lsls	r4, r2, #2
 8003e68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e6c:	008b      	lsls	r3, r1, #2
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4623      	mov	r3, r4
 8003e72:	4628      	mov	r0, r5
 8003e74:	4631      	mov	r1, r6
 8003e76:	f7fc f9ad 	bl	80001d4 <__aeabi_uldivmod>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4bb8      	ldr	r3, [pc, #736]	; (8004164 <UART_SetConfig+0x6f4>)
 8003e82:	fba3 2302 	umull	r2, r3, r3, r2
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	469b      	mov	fp, r3
 8003e90:	f04f 0c00 	mov.w	ip, #0
 8003e94:	46d9      	mov	r9, fp
 8003e96:	46e2      	mov	sl, ip
 8003e98:	eb19 0309 	adds.w	r3, r9, r9
 8003e9c:	eb4a 040a 	adc.w	r4, sl, sl
 8003ea0:	4699      	mov	r9, r3
 8003ea2:	46a2      	mov	sl, r4
 8003ea4:	eb19 090b 	adds.w	r9, r9, fp
 8003ea8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003eac:	f04f 0100 	mov.w	r1, #0
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ebc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ec0:	4689      	mov	r9, r1
 8003ec2:	4692      	mov	sl, r2
 8003ec4:	eb1b 0509 	adds.w	r5, fp, r9
 8003ec8:	eb4c 060a 	adc.w	r6, ip, sl
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	f04f 0400 	mov.w	r4, #0
 8003ede:	0094      	lsls	r4, r2, #2
 8003ee0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ee4:	008b      	lsls	r3, r1, #2
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4623      	mov	r3, r4
 8003eea:	4628      	mov	r0, r5
 8003eec:	4631      	mov	r1, r6
 8003eee:	f7fc f971 	bl	80001d4 <__aeabi_uldivmod>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4b9a      	ldr	r3, [pc, #616]	; (8004164 <UART_SetConfig+0x6f4>)
 8003efa:	fba3 1302 	umull	r1, r3, r3, r2
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	2164      	movs	r1, #100	; 0x64
 8003f02:	fb01 f303 	mul.w	r3, r1, r3
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	3332      	adds	r3, #50	; 0x32
 8003f0c:	4a95      	ldr	r2, [pc, #596]	; (8004164 <UART_SetConfig+0x6f4>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f18:	4498      	add	r8, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	469b      	mov	fp, r3
 8003f1e:	f04f 0c00 	mov.w	ip, #0
 8003f22:	46d9      	mov	r9, fp
 8003f24:	46e2      	mov	sl, ip
 8003f26:	eb19 0309 	adds.w	r3, r9, r9
 8003f2a:	eb4a 040a 	adc.w	r4, sl, sl
 8003f2e:	4699      	mov	r9, r3
 8003f30:	46a2      	mov	sl, r4
 8003f32:	eb19 090b 	adds.w	r9, r9, fp
 8003f36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f3a:	f04f 0100 	mov.w	r1, #0
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f4e:	4689      	mov	r9, r1
 8003f50:	4692      	mov	sl, r2
 8003f52:	eb1b 0509 	adds.w	r5, fp, r9
 8003f56:	eb4c 060a 	adc.w	r6, ip, sl
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4619      	mov	r1, r3
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	f04f 0400 	mov.w	r4, #0
 8003f6c:	0094      	lsls	r4, r2, #2
 8003f6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f72:	008b      	lsls	r3, r1, #2
 8003f74:	461a      	mov	r2, r3
 8003f76:	4623      	mov	r3, r4
 8003f78:	4628      	mov	r0, r5
 8003f7a:	4631      	mov	r1, r6
 8003f7c:	f7fc f92a 	bl	80001d4 <__aeabi_uldivmod>
 8003f80:	4603      	mov	r3, r0
 8003f82:	460c      	mov	r4, r1
 8003f84:	461a      	mov	r2, r3
 8003f86:	4b77      	ldr	r3, [pc, #476]	; (8004164 <UART_SetConfig+0x6f4>)
 8003f88:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	2164      	movs	r1, #100	; 0x64
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	3332      	adds	r3, #50	; 0x32
 8003f9a:	4a72      	ldr	r2, [pc, #456]	; (8004164 <UART_SetConfig+0x6f4>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	f003 020f 	and.w	r2, r3, #15
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4442      	add	r2, r8
 8003fac:	609a      	str	r2, [r3, #8]
 8003fae:	e0d0      	b.n	8004152 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fb0:	f7fe ff38 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 8003fb4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	469a      	mov	sl, r3
 8003fba:	f04f 0b00 	mov.w	fp, #0
 8003fbe:	46d0      	mov	r8, sl
 8003fc0:	46d9      	mov	r9, fp
 8003fc2:	eb18 0308 	adds.w	r3, r8, r8
 8003fc6:	eb49 0409 	adc.w	r4, r9, r9
 8003fca:	4698      	mov	r8, r3
 8003fcc:	46a1      	mov	r9, r4
 8003fce:	eb18 080a 	adds.w	r8, r8, sl
 8003fd2:	eb49 090b 	adc.w	r9, r9, fp
 8003fd6:	f04f 0100 	mov.w	r1, #0
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fe2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fe6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fea:	4688      	mov	r8, r1
 8003fec:	4691      	mov	r9, r2
 8003fee:	eb1a 0508 	adds.w	r5, sl, r8
 8003ff2:	eb4b 0609 	adc.w	r6, fp, r9
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	f04f 0400 	mov.w	r4, #0
 8004008:	0094      	lsls	r4, r2, #2
 800400a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800400e:	008b      	lsls	r3, r1, #2
 8004010:	461a      	mov	r2, r3
 8004012:	4623      	mov	r3, r4
 8004014:	4628      	mov	r0, r5
 8004016:	4631      	mov	r1, r6
 8004018:	f7fc f8dc 	bl	80001d4 <__aeabi_uldivmod>
 800401c:	4603      	mov	r3, r0
 800401e:	460c      	mov	r4, r1
 8004020:	461a      	mov	r2, r3
 8004022:	4b50      	ldr	r3, [pc, #320]	; (8004164 <UART_SetConfig+0x6f4>)
 8004024:	fba3 2302 	umull	r2, r3, r3, r2
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	469b      	mov	fp, r3
 8004032:	f04f 0c00 	mov.w	ip, #0
 8004036:	46d9      	mov	r9, fp
 8004038:	46e2      	mov	sl, ip
 800403a:	eb19 0309 	adds.w	r3, r9, r9
 800403e:	eb4a 040a 	adc.w	r4, sl, sl
 8004042:	4699      	mov	r9, r3
 8004044:	46a2      	mov	sl, r4
 8004046:	eb19 090b 	adds.w	r9, r9, fp
 800404a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800404e:	f04f 0100 	mov.w	r1, #0
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800405a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800405e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004062:	4689      	mov	r9, r1
 8004064:	4692      	mov	sl, r2
 8004066:	eb1b 0509 	adds.w	r5, fp, r9
 800406a:	eb4c 060a 	adc.w	r6, ip, sl
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4619      	mov	r1, r3
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	f04f 0400 	mov.w	r4, #0
 8004080:	0094      	lsls	r4, r2, #2
 8004082:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004086:	008b      	lsls	r3, r1, #2
 8004088:	461a      	mov	r2, r3
 800408a:	4623      	mov	r3, r4
 800408c:	4628      	mov	r0, r5
 800408e:	4631      	mov	r1, r6
 8004090:	f7fc f8a0 	bl	80001d4 <__aeabi_uldivmod>
 8004094:	4603      	mov	r3, r0
 8004096:	460c      	mov	r4, r1
 8004098:	461a      	mov	r2, r3
 800409a:	4b32      	ldr	r3, [pc, #200]	; (8004164 <UART_SetConfig+0x6f4>)
 800409c:	fba3 1302 	umull	r1, r3, r3, r2
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	2164      	movs	r1, #100	; 0x64
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	3332      	adds	r3, #50	; 0x32
 80040ae:	4a2d      	ldr	r2, [pc, #180]	; (8004164 <UART_SetConfig+0x6f4>)
 80040b0:	fba2 2303 	umull	r2, r3, r2, r3
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ba:	4498      	add	r8, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	469b      	mov	fp, r3
 80040c0:	f04f 0c00 	mov.w	ip, #0
 80040c4:	46d9      	mov	r9, fp
 80040c6:	46e2      	mov	sl, ip
 80040c8:	eb19 0309 	adds.w	r3, r9, r9
 80040cc:	eb4a 040a 	adc.w	r4, sl, sl
 80040d0:	4699      	mov	r9, r3
 80040d2:	46a2      	mov	sl, r4
 80040d4:	eb19 090b 	adds.w	r9, r9, fp
 80040d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040dc:	f04f 0100 	mov.w	r1, #0
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040f0:	4689      	mov	r9, r1
 80040f2:	4692      	mov	sl, r2
 80040f4:	eb1b 0509 	adds.w	r5, fp, r9
 80040f8:	eb4c 060a 	adc.w	r6, ip, sl
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4619      	mov	r1, r3
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	f04f 0400 	mov.w	r4, #0
 800410e:	0094      	lsls	r4, r2, #2
 8004110:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004114:	008b      	lsls	r3, r1, #2
 8004116:	461a      	mov	r2, r3
 8004118:	4623      	mov	r3, r4
 800411a:	4628      	mov	r0, r5
 800411c:	4631      	mov	r1, r6
 800411e:	f7fc f859 	bl	80001d4 <__aeabi_uldivmod>
 8004122:	4603      	mov	r3, r0
 8004124:	460c      	mov	r4, r1
 8004126:	461a      	mov	r2, r3
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <UART_SetConfig+0x6f4>)
 800412a:	fba3 1302 	umull	r1, r3, r3, r2
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	2164      	movs	r1, #100	; 0x64
 8004132:	fb01 f303 	mul.w	r3, r1, r3
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	3332      	adds	r3, #50	; 0x32
 800413c:	4a09      	ldr	r2, [pc, #36]	; (8004164 <UART_SetConfig+0x6f4>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	f003 020f 	and.w	r2, r3, #15
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4442      	add	r2, r8
 800414e:	609a      	str	r2, [r3, #8]
}
 8004150:	e7ff      	b.n	8004152 <UART_SetConfig+0x6e2>
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800415c:	40011000 	.word	0x40011000
 8004160:	40011400 	.word	0x40011400
 8004164:	51eb851f 	.word	0x51eb851f

08004168 <__libc_init_array>:
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	4e0d      	ldr	r6, [pc, #52]	; (80041a0 <__libc_init_array+0x38>)
 800416c:	4c0d      	ldr	r4, [pc, #52]	; (80041a4 <__libc_init_array+0x3c>)
 800416e:	1ba4      	subs	r4, r4, r6
 8004170:	10a4      	asrs	r4, r4, #2
 8004172:	2500      	movs	r5, #0
 8004174:	42a5      	cmp	r5, r4
 8004176:	d109      	bne.n	800418c <__libc_init_array+0x24>
 8004178:	4e0b      	ldr	r6, [pc, #44]	; (80041a8 <__libc_init_array+0x40>)
 800417a:	4c0c      	ldr	r4, [pc, #48]	; (80041ac <__libc_init_array+0x44>)
 800417c:	f000 f82c 	bl	80041d8 <_init>
 8004180:	1ba4      	subs	r4, r4, r6
 8004182:	10a4      	asrs	r4, r4, #2
 8004184:	2500      	movs	r5, #0
 8004186:	42a5      	cmp	r5, r4
 8004188:	d105      	bne.n	8004196 <__libc_init_array+0x2e>
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004190:	4798      	blx	r3
 8004192:	3501      	adds	r5, #1
 8004194:	e7ee      	b.n	8004174 <__libc_init_array+0xc>
 8004196:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800419a:	4798      	blx	r3
 800419c:	3501      	adds	r5, #1
 800419e:	e7f2      	b.n	8004186 <__libc_init_array+0x1e>
 80041a0:	08004ea8 	.word	0x08004ea8
 80041a4:	08004ea8 	.word	0x08004ea8
 80041a8:	08004ea8 	.word	0x08004ea8
 80041ac:	08004eac 	.word	0x08004eac

080041b0 <memcpy>:
 80041b0:	b510      	push	{r4, lr}
 80041b2:	1e43      	subs	r3, r0, #1
 80041b4:	440a      	add	r2, r1
 80041b6:	4291      	cmp	r1, r2
 80041b8:	d100      	bne.n	80041bc <memcpy+0xc>
 80041ba:	bd10      	pop	{r4, pc}
 80041bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041c4:	e7f7      	b.n	80041b6 <memcpy+0x6>

080041c6 <memset>:
 80041c6:	4402      	add	r2, r0
 80041c8:	4603      	mov	r3, r0
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d100      	bne.n	80041d0 <memset+0xa>
 80041ce:	4770      	bx	lr
 80041d0:	f803 1b01 	strb.w	r1, [r3], #1
 80041d4:	e7f9      	b.n	80041ca <memset+0x4>
	...

080041d8 <_init>:
 80041d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041da:	bf00      	nop
 80041dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041de:	bc08      	pop	{r3}
 80041e0:	469e      	mov	lr, r3
 80041e2:	4770      	bx	lr

080041e4 <_fini>:
 80041e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e6:	bf00      	nop
 80041e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ea:	bc08      	pop	{r3}
 80041ec:	469e      	mov	lr, r3
 80041ee:	4770      	bx	lr
