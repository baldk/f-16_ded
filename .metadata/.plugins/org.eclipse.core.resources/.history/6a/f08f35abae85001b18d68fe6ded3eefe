/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "spi.h"
#include "gpio.h"
#include "falcon_ded_font.h"
#include "ssd1322.h"

/* Private includes ----------------------------------------------------------*/

/* Private typedef -----------------------------------------------------------*/

/* Private define ------------------------------------------------------------*/
#define SSD1322_256_64_4

#if defined(SSD1322_256_64_4)
  #define SSD1322_LCDHEIGHT             64
  #define SSD1322_LCDWIDTH              256
  #define SSD1322_BITS_PER_PIXEL        4
#endif

/* Private macro -------------------------------------------------------------*/

/* Private variables ---------------------------------------------------------*/
static uint8_t buffer[SSD1322_LCDHEIGHT * SSD1322_LCDWIDTH / (8 / SSD1322_BITS_PER_PIXEL)] = { 0x00 };

/* Private function prototypes -----------------------------------------------*/
void SSD1322_Command(uint8_t command);
void SSD1322_Data(uint8_t data);
void SSD1322_DataBytes(uint8_t* data, uint16_t length);
void SSD1322_Write(uint8_t isCommand, uint8_t* payload, uint16_t length);


/* Private user code ---------------------------------------------------------*/


void SSD1322_Initialize(void)
{
	// Reset
	SSD1322_Reset();

	// Initialize
	SSD1322_Command(SSD1322_CMD_SETCOMMANDLOCK);// 0xFD
	SSD1322_Data(0x12);// Unlock OLED driver IC

	SSD1322_Command(SSD1322_CMD_DISPLAYOFF);// 0xAE

	SSD1322_Command(SSD1322_CMD_SETCLOCKDIVIDER);// 0xB3
	SSD1322_Data(0x91);// 0xB3

	SSD1322_Command(SSD1322_CMD_SETMUXRATIO);// 0xCA
	SSD1322_Data(0x3F);// duty = 1/64

	SSD1322_Command(SSD1322_CMD_SETDISPLAYOFFSET);// 0xA2
	SSD1322_Data(0x00);

	SSD1322_Command(SSD1322_CMD_SETSTARTLINE);// 0xA1
	SSD1322_Data(0x00);

	SSD1322_Command(SSD1322_CMD_SETREMAP);// 0xA0
	SSD1322_Data(0x14);//Horizontal address increment,Disable Column Address Re-map,Enable Nibble Re-map,Scan from COM[N-1] to COM0,Disable COM Split Odd Even
	SSD1322_Data(0x11);//Enable Dual COM mode

	SSD1322_Command(SSD1322_CMD_SETGPIO);// 0xB5
	SSD1322_Data(0x00);// Disable GPIO Pins Input

	SSD1322_Command(SSD1322_CMD_FUNCTIONSEL);// 0xAB
	SSD1322_Data(0x01);// selection external vdd

	SSD1322_Command(SSD1322_CMD_DISPLAYENHANCE);// 0xB4
	SSD1322_Data(0xA0);// enables the external VSL
	SSD1322_Data(0xFD);// 0xfFD,Enhanced low GS display quality;default is 0xb5(normal),

	SSD1322_Command(SSD1322_CMD_SETCONTRASTCURRENT);// 0xC1
	SSD1322_Data(0xFF);// 0xFF - default is 0x7f

	SSD1322_Command(SSD1322_CMD_MASTERCURRENTCONTROL);// 0xC7
	SSD1322_Data(0x0F);// default is 0x0F

	// Set grayscale
	SSD1322_Command(SSD1322_CMD_SELECTDEFAULTGRAYSCALE); // 0xB9

	SSD1322_Command(SSD1322_CMD_SETPHASELENGTH);// 0xB1
	SSD1322_Data(0xE2);// default is 0x74

	SSD1322_Command(SSD1322_CMD_DISPLAYENHANCEB);// 0xD1
	SSD1322_Data(0x82);// Reserved;default is 0xa2(normal)
	SSD1322_Data(0x20);//

	SSD1322_Command(SSD1322_CMD_SETPRECHARGEVOLTAGE);// 0xBB
	SSD1322_Data(0x1F);// 0.6xVcc

	SSD1322_Command(SSD1322_CMD_SETSECONDPRECHARGEPERIOD);// 0xB6
	SSD1322_Data(0x08);// default

	SSD1322_Command(SSD1322_CMD_SETVCOMH);// 0xBE
	SSD1322_Data(0x07);// 0.86xVcc;default is 0x04

	SSD1322_Command(SSD1322_CMD_NORMALDISPLAY);// 0xA6

	SSD1322_Command(SSD1322_CMD_EXITPARTIALDISPLAY);// 0xA9

	// Clear down image ram before opening display
	SSD1322_Fill(0x00);

	// Turn Display ON
	SSD1322_Command(SSD1322_CMD_DISPLAYON);// 0xAF

#if 0
	for (int y = 0; y < 64; y++)
	{
	  for (int x = 0; x < 128; x++)
	  {
	    if (y % 2 == 0)
	    {
	      buffer[(y * 128) + x] = 0xF0;
	    }
	    else
	    {
	      buffer[(y * 128) + x] = 0x0F;
	    }
	  }
	}
#endif

#if 0
	for (uint8_t i = 0; i < 24; i++)
  {
    SSD1322_DrawUnicode(i + 0x41, 20 + (i * 9), 0 + ((9 + 4) * 0), 0);
  }

	for (uint8_t i = 0; i < 2; i++)
	{
	  SSD1322_DrawUnicode(i + 0x41 + 24, 20 + (i * 9), 0 + ((9 + 4) * 1), 0);
	}

	for (uint8_t i = 0; i < 10; i++)
  {
    SSD1322_DrawUnicode(i + 0x30, 20 + (i * 9), 0 + ((9 + 4) * 2), 0);
  }

	for (uint8_t i = 0; i < 2; i++)
  {
    SSD1322_DrawUnicode(i + 0x00, 20 + (i * 9), 0 + ((9 + 4) * 3), 0);
  }

	for (uint8_t i = 0; i < 24; i++)
  {
    SSD1322_DrawUnicode(i + 0x41, 20 + (i * 9), 0 + ((9 + 4) * 4), 1);
  }
#else
	//char testString[36] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
	//char testString[66];

  #define MAX_CHARS   120

	char testString[MAX_CHARS];
	uint8_t charCount = 0;

	if (charCount < MAX_CHARS)
	{
    for (uint8_t i = 0; i < 63; i++)
    {
      testString[charCount++] = i + 33;

      if (charCount == MAX_CHARS)
      {
        break;
      }
    }
	}
	if (charCount < MAX_CHARS)
	{
    for (uint8_t i = 0; i < 3; i++)
    {
      testString[charCount++] = i + 123;

      if (charCount == MAX_CHARS)
      {
        break;
      }
    }
	}
	if (charCount < MAX_CHARS)
	{
    for (uint8_t i = 0; i < 63; i++)
    {
      testString[charCount++] = i + 33;

      if (charCount == MAX_CHARS)
      {
        break;
      }
    }
	}
	if (charCount < MAX_CHARS)
  {
    for (uint8_t i = 0; i < 3; i++)
    {
      testString[charCount++] = i + 123;

      if (charCount == MAX_CHARS)
      {
        break;
      }
    }
  }

	for (uint16_t i = 0; i < MAX_CHARS; i++)
	{
	  SSD1322_DrawUnicode(testString[i], 20 + ((i % 24) * 9), 0 + ((9 + 4) * (i / 24)), i < 66 ? 0 : 1);
	}
#endif

	SSD1322_Display();
}


void SSD1322_Reset(void)
{
	// Release RESET pin
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET);

	// Wait for 100ms
	HAL_Delay(100);

	// Set RESET pin
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET);

	// Wait for 400ms
	HAL_Delay(400);

	// Release RESET pin
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET);
}


void SSD1322_Command(uint8_t command)
{
  SSD1322_Write(1, &command, 1);
}


void SSD1322_Data(uint8_t data)
{
  SSD1322_Write(0, &data, 1);
}


void SSD1322_DataBytes(uint8_t* data, uint16_t length)
{
  SSD1322_Write(0, data, length);
}


void SSD1322_Write(uint8_t isCommand, uint8_t* payload, uint16_t length)
{
  // Set CS pin high
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);

  if (isCommand)
  {
    // Command - Set DC pin low
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
  }
  else
  {
    // Data - Set DC pin high
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
  }

  // Set CS pin low
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);

  // Write command
  HAL_SPI_Transmit(&hspi3, payload, length, 1000);

  // Set CS pin high
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
}


void SSD1322_Display(void)
{
  SSD1322_Command(SSD1322_CMD_SETCOLUMNADDR);
  SSD1322_Data(SSD1322_MIN_SEG);
  SSD1322_Data(SSD1322_MAX_SEG);

  SSD1322_Command(SSD1322_CMD_SETROWADDR);
  SSD1322_Data(0);
  SSD1322_Data(63);

  SSD1322_Command(SSD1322_CMD_WRITERAM);

  uint16_t bufSize = (SSD1322_LCDHEIGHT * SSD1322_LCDWIDTH / (8 / SSD1322_BITS_PER_PIXEL)); // bytes
  uint8_t *pBuf = buffer;

#ifdef SSD1322_256_64_4
  // Write as quickly as possible
  SSD1322_DataBytes(pBuf, bufSize);
#endif
#ifdef SSD1322_256_64_1
  uint16_t srcIndex = 0;

  while (srcIndex < bufSize)
  {
    uint8_t destIndex = 0;
    uint8_t destArray[64] = {0};

    while (destIndex < 64)
    {
      uint8_t mask = 0x80;

      while (mask > 0)
      {
        // upper nibble
        destArray[destIndex] |= (pBuf[srcIndex] & mask) ? 0xf0 : 0x00;
        //shift mask to next bit, but this goes into lower nibble.
        mask >>= 1;
        destArray[destIndex] |= (pBuf[srcIndex] & mask) ? 0x0f : 0x00;

        destIndex++;
        mask >>= 1;
      }
      srcIndex++;
    }
    // Send to display here.
    ssd1322_dataBytes(destArray, 64);
  }
#endif
}


void SSD1322_Fill(uint8_t color)
{
  uint8_t x;
  uint8_t y;

  // Set column
  SSD1322_Command(SSD1322_CMD_SETCOLUMNADDR);
  SSD1322_Data(SSD1322_MIN_SEG);
  SSD1322_Data(SSD1322_MAX_SEG);

  // Set row
  SSD1322_Command(SSD1322_CMD_SETROWADDR);
  SSD1322_Data(0);
  SSD1322_Data(63);

  // Set color
  color = (color & 0x0F) | (color << 4);

  // Set Write RAM command
  SSD1322_Command(SSD1322_CMD_WRITERAM);

  // Write data
  for (y = 0; y < 64; y++)
  {
    for (x = 0; x < 128; x++)
    {
      SSD1322_Data(color);
    }
  }

  HAL_Delay(0);
}


void SSD1322_DrawPixel(int16_t x, int16_t y, uint16_t gscale)
{
#if 0
  // Check rotation, move pixel around if necessary
  switch (getRotation())
  {
    case 1:
    {
      _swap_int16_t(x, y);
      x = WIDTH - x - 1;
    }
    break;

    case 2:
    {
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
    }
    break;

    case 3:
    {
      _swap_int16_t(x, y);
      y = HEIGHT - y - 1;
    }
    break;

    default:
    {
      // Empty
    }
  }
#endif

  //if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
  if ((x < 0) || (x >= SSD1322_LCDWIDTH) || (y < 0) || (y >= SSD1322_LCDHEIGHT))
  {
    return;
  }

#ifdef SSD1322_256_64_4 // 4 bits per pixel
  uint8_t mask = ((x % 2) ? gscale : gscale << 4);
  uint8_t *pBuf = &buffer[(x >> 1) + (y * (SSD1322_LCDWIDTH / 2))];
  uint8_t b1 = *pBuf;
  b1 &= (x % 2) ? 0xF0 : 0x0F; // cleardown nibble to be replaced
  // write our value in
  *pBuf++ = b1 | mask;
#endif
#ifdef SSD1322_256_64_1 // 1 bit per pixel
  register uint8_t *pBuf = &buffer[(x >> 3) + (y * (SSD1322_LCDWIDTH / 8))];
  switch (gscale)
  {
    case WHITE: *pBuf |=  (0x80 >> (x%8)); break;
    case BLACK: *pBuf &= ~(0x80 >> (x%8)); break;
    case INVERSE: *pBuf ^=  (0x80 >> (x%8)); break;
  }
#endif
}


#if 0
int SSD1322_DrawUnicode(unsigned int uniCode, int x, int y, int size)
{
  uint16_t rowData;
  uint8_t  pixelData;

  for (uint8_t col = 0; col < 11; col++)
  {
    //rowData = falconDedFont[col];
    rowData = falconDedFont[uniCode][col];

    for (int8_t row = 4; row >= 0; row--)
    {
      pixelData   = rowData & 0x1 ? 0x0F : 0x00;
      pixelData  |= rowData & 0x2 ? 0xF0 : 0x00;
      rowData   >>= 2;

      //character[col][row] = pixelData;
      buffer[((y + col) * 128) + ((x / 2) + row)] = pixelData;
    }
  }

  return 1;
}
#elif 0
int SSD1322_DrawUnicode(unsigned int uniCode, int x, int y, uint8_t invert)
{
  uint16_t rowData;
  uint8_t  pixelMask;
  uint8_t  pixelValue = 0xFF;

  for (uint8_t row = 0; row < 9; row++)
  {
    //rowData = falconDedFont_Normal[uniCode][row];
    // 0-9
    if ((uniCode >= 0x30) && (uniCode <= 0x39))
    {
      rowData = falconDedFont_Numbers_Normal[uniCode - 0x30][row];
    }
    // A-Z
    else if ((uniCode >= 0x41) && (uniCode <= 0x5A))
    {
      rowData = falconDedFont_Letters_Normal[uniCode - 0x41][row];
    }
    // Specials
    else
    {
      switch(uniCode)
      {
        //case '\0000':
        case 0x00:
        {
          rowData = falconDedFont_Specials_Normal[0][row];
        }
        break;

        default:
        {
          return 0;
        }
      }
    }

    for (int8_t col = 0; col < 8; col++)
    {
      pixelMask = ((x + col) % 2 == 0) ? 0xF0 : 0x0F;

      // Clear pixel
      buffer[((y + row) * 128) + ((x + col) / 2)] &= ~pixelMask;

      // Set pixel
      if (rowData & 0x40)
      {
        buffer[((y + row) * 128) + ((x + col) / 2)] |= (pixelValue & pixelMask);
      }
      rowData <<= 1;
    }
  }

  return 1;
}
#elif 0
int SSD1322_DrawUnicode(unsigned int uniCode, int x, int y, uint8_t invert)
{
  uint16_t rowData;
  uint8_t  pixelMask;
  uint8_t  pixelValue = 0xFF;

  for (uint8_t row = 0; row < 11; row++)
  {
    // 0-9
    if ((uniCode >= 0x30) && (uniCode <= 0x39))
    {
      rowData = falconDedFont_Numbers_Normal[uniCode - 0x30][row];
    }
    // A-Z
    else if ((uniCode >= 0x41) && (uniCode <= 0x5A))
    {
      rowData = falconDedFont_Letters_Normal[uniCode - 0x41][row];
    }
    // Specials
    else
    {
      switch(uniCode)
      {
        //case '\0000':
        case 0x00:
        {
          rowData = falconDedFont_Specials_Normal[0][row];
        }
        break;

        case 0x01:
        {
          rowData = falconDedFont_Specials_Normal[1][row];
        }
        break;

        default:
        {
          return 0;
        }
      }
    }

    rowData = invert ? ~rowData : rowData;

    for (int8_t col = 0; col < 8; col++)
    {
      pixelMask = ((x + col) % 2 == 0) ? 0xF0 : 0x0F;

      // Clear pixel
      buffer[((y + row) * 128) + ((x + col) / 2)] &= ~pixelMask;

      // Set pixel
      if (rowData & 0x80)
      {
        buffer[((y + row) * 128) + ((x + col) / 2)] |= (pixelValue & pixelMask);
      }
      rowData <<= 1;
    }
  }

  return 1;
}
#else
int SSD1322_DrawUnicode(unsigned int uniCode, int x, int y, uint8_t invert)
{
  uint16_t rowData;
  uint8_t  pixelMask;
  uint8_t  pixelValue = 0xFF;

  for (uint8_t row = 0; row < 11; row++)
  {
    // Characters between (and including) 33 and 95
    if ((uniCode >= 33) && (uniCode <= 95))
    {
      rowData = falconDedFont_33_95_Normal[uniCode - 33][row];
    }
    // Characters between (and including) 123 and 125
    else if ((uniCode >= 123) && (uniCode <= 125))
    {
      rowData = falconDedFont_123_125_Normal[uniCode - 123][row];
    }
    // Specials
    else
    {
      return 0;
    }

    rowData = invert ? ~rowData : rowData;

    for (int8_t col = 0; col < 8; col++)
    {
      pixelMask = ((x + col) % 2 == 0) ? 0xF0 : 0x0F;

      // Clear pixel
      buffer[((y + row) * 128) + ((x + col) / 2)] &= ~pixelMask;

      // Set pixel
      if (rowData & 0x80)
      {
        buffer[((y + row) * 128) + ((x + col) / 2)] |= (pixelValue & pixelMask);
      }
      rowData <<= 1;
    }
  }

  return 1;
}
#endif


int SSD1322_DrawChar(char c, int x, int y, int size)
{

}


#if 0
int SSD1322_DrawChar(char c, int x, int y, int size)
{
//#ifdef LOAD_GLCD
  // Use Adafruit font 5x7
  if (size == 0)
  {
     setCursor(x, y);
     return  print(c);
  }
//#endif
  int retVal = drawUnicode(c, x, y, size);

  return retVal;
}
#endif


#if 0
int ESP8266_SSD1322::drawString(char *string, int poX, int poY, int size)
{
//Serial.println("drawString:E");
#ifdef LOAD_GLCD
  // Use Adafruit font 5x7
  if (size == 0)
  {
    setCursor(poX, poY);
    print(string);
    return 0;
  }
#endif
  int sumX = 0;

  while(*string)
  {
    int xPlus = drawChar(*string, poX, poY, size);
    sumX += xPlus;
    string++;
    poX += xPlus;                            /* Move cursor right       */
  }
//Serial.print("drawString:x:");
//Serial.println(sumX);
  return sumX;
}
#endif


#if 0
void SSD1322_DrawFastHorizontalLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
  // Do bounds/limit checks
  if (y < 0 || y >= HEIGHT) {
    return;
  }

  // Make sure we don't try to draw below 0
  if (x < 0)
  {
    w += x;
    x = 0;
  }

  // Make sure we don't go off the edge of the display
  if ((x + w) > WIDTH)
  {
    w = (WIDTH - x);
  }

  // If our width is now negative, punt
  if (w <= 0)
  {
    return;
  }

  // set up the pointer for  movement through the buffer
#ifdef SSD1322_256_64_4

  // adjust the buffer pointer for the current row
  register uint8_t *pBuf = buffer;
  pBuf += (x >> 1) + (y * (SSD1322_LCDWIDTH / 2));

  register uint8_t oddmask = color;
  register uint8_t evenmask = (color << 4);
  register uint8_t fullmask = (color << 4) + color;
  uint8_t byteLen = w / 2;

  if (((x % 2) == 0) && ((w % 2) == 0))  // Start at even and length is even
  {
    while (byteLen--)
    {
      *pBuf++ = fullmask;
    }

    return;
  }

  if (((x % 2) == 1) && ((w % 2) == 1)) // Start at odd and length is odd
  {
    register uint8_t b1 = *pBuf;
    b1 &= (x % 2) ? 0xF0 : 0x0F; // cleardown nibble to be replaced

    // write our value in
    *pBuf++ = b1 | oddmask;

    while (byteLen--)
    {
      *pBuf++ = fullmask;
    }
    return;
  }

  if (((x % 2) == 0) && ((w % 2) == 1)) // Start at even and length is odd
  {
    while (byteLen--)
    {
      *pBuf++ = fullmask;
    }

    register uint8_t b1 = *pBuf;
    b1 &= 0x0F; // cleardown nibble to be replaced

    // write our value in
    *pBuf++ = b1 | evenmask;
    return;
  }

  if (((x % 2) == 1) && ((w % 2) == 0)) // Start at odd and length is even
  {
    register uint8_t b1 = *pBuf;
    b1 &= (x % 2) ? 0xF0 : 0x0F; // cleardown nibble to be replaced

    // write our value in
    *pBuf++ = b1 | oddmask;

    while (byteLen--)
    {
      *pBuf++ = fullmask;
    }

    b1 = *pBuf;
    b1 &= 0x0F; // cleardown nibble to be replaced

    // write our value in
    *pBuf++ = b1 | evenmask;
    return;
  }
#endif
#ifdef SSD1322_256_64_1
  register uint8_t *pBuf = &buffer[(x >> 3) + (y * (SSD1322_LCDWIDTH / 8))];
  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (x % 8);

//Serial.println("** START ***");
//Serial.print("mod=");
//Serial.println(mod);
  if (mod)
  {
    // mask off the high n bits we want to set
    mod = 8-mod;

//Serial.print("mod=");
//Serial.println(mod);
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = premask[mod];

    // adjust the mask if we're not going to reach the end of this byte
    if( w < mod)
    {
//Serial.println("here 2");
      mask &= (0XFF << (mod - w));
//Serial.print("mask=");
//Serial.println((int)mask);
    }

    switch (color)
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
      case INVERSE: *pBuf ^=  mask;  break;
    }

    // fast exit if we're done here!
    if(w < mod)
    {
      return;
    }

    w -= mod;

    // adjust the buffer forward
    pBuf++;
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if (w >= 8)
  {
    if (color == INVERSE)
    {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
      do
      {
        *pBuf=~(*pBuf);

        // adjust the buffer forward
        pBuf++;

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        w -= 8;
        } while(w >= 8);
    }
    else
    {
//Serial.println("here 1");
      // store a local value to work with
      register uint8_t val = (color == WHITE) ? 255 : 0;

      do
      {
//Serial.print("w=");
//Serial.println(w);
        // write our value in
        *pBuf = val;

        // adjust the buffer forward
        pBuf++;

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        w -= 8;
      } while(w >= 8);
    }
  }

  // now do the final partial byte, if necessary
  if (w)
  {
    mod = w % 8;
//Serial.print("w%8=");
//Serial.println(mod);
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = postmask[mod];
    switch (color)
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
      case INVERSE: *pBuf ^=  mask;  break;
    }
  }
#endif

}
#endif
